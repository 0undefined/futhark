name: CI

on:
  pull_request:
    branches: [ master ]

  push:
    branches: [ master, wasm ]

jobs:
  build-linux-nix:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Nix
      uses: cachix/install-nix-action@v12

    - uses: cachix/cachix-action@v8
      with:
        name: futhark
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - name: Build Futhark
      run: nix-build --argstr suffix nightly-linux-x86_64 --argstr commit $GITHUB_SHA

    - uses: actions/upload-artifact@v1
      with:
        name: futhark-nightly-linux-x86_64.tar.xz
        path: result/futhark-nightly-linux-x86_64.tar.xz

  test-unit-and-style:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Nix
      uses: cachix/install-nix-action@v12

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('nix/sources.json') }}-style

    - name: Style check
      run: nix-shell --pure --run "tools/style-check.sh src unittests"

    - name: Unit tests
      run: |
          nix-shell --pure --run "cabal update"
          nix-shell --pure --run "cabal test"


  test-c:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -c --backend=c tests examples --no-tuning
        make -C libtests/c

  test-wasm:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: mymindstorm/setup-emsdk@v7
      with:
        version: 2.0.10
        actions-cache-folder: 'emsdk-cache'

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -c --backend=wasm --runner=node examples --no-tuning

