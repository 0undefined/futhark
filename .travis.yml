# NB: don't set `language: haskell` here.  We use 'sh' in order to get
# a pure VM with nothing really preinstalled.
language: sh

# The following enables several GHC versions to be tested; often it's
# enough to test only against the last release in a major GHC
# version. Feel free to omit lines listings versions you don't
# need/want testing for.
env:
 - CABALVER=1.18 GHCVER=7.8.4

# Note: the distinction between `before_install` and `install` is not
# important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - travis_retry cabal update
 - travis_retry cabal install happy alex hlint
 - export PATH=$HOME/.cabal/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - cabal install --only-dependencies --enable-tests

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 - cabal configure --enable-tests -v2
 - cabal build --ghc-options -Werror
 - cabal test  # Run the Cabal test suite.
 - cabal install
 - data/runtests.sh # Run integration test suite.
 - tools/style-check.sh src # Check for style issues.
 - cabal haddock # Can we build the documentation?
 - cabal check # Sanity-checks the .cabal file.

# FIXME: Generating a source distribution is broken at the moment,
# because Cabal cannot handle our autogenerated Build_futhark.hs
# module.

# # - cabal sdist # Tests that a source-distribution can be generated

# # The following scriptlet checks that the resulting source
# # distribution can be built & installed
#  - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
#    cd dist/;
#    if [ -f "$SRC_TGZ" ]; then
#       cabal install --force-reinstalls "$SRC_TGZ";
#    else
#       echo "expected '$SRC_TGZ' not found";
#       exit 1;
#    fi
