-- Source code:

-- -- Tests the handling of multiple patterns in let expressions
-- entry main [n] (xs: [n]i64) (yss: [n][n]i64) =
--     let f arr0 arr1 =
--         reduce_comm
--         (\(z,w) (x,y) -> (z+x*y,w+x+y))
--         (0,0)
--         (zip arr0 arr1)
--     in map (\ys ->
--                 #[unsafe]
--                 let (i,j) = f xs ys
--                 in xs[i]+ys[j]

-- IR:

types {

}



entry("main",
      {xs: []i64,
       yss: [][]i64},
      {*[]i64})
  entry_main (n_5307 : i64,
              xs_5308 : [n_5307]i64,
              yss_5309 : [n_5307][n_5307]i64)
  : {*[n_5307]i64} = {
  let {suff_outer_par_5456 : bool} =
    cmp_size(suff_outer_par_0, threshold(def, )) <= n_5307
  let {nest_size_5544 : i64} =
    mul_nw64(n_5307, n_5307)
  let {segred_group_size_5545 : i64} =
    get_size(segred_group_size_5522, group_size)
  let {num_groups_5546 : i64} =
    calc_num_groups(nest_size_5544, segred_num_groups_5524, segred_group_size_5545)
  let {segmap_group_size_5565 : i64} =
    get_size(segmap_group_size_5508, group_size)
  let {tile_size_5580 : i64} =
    get_size(tile_size_5579, group_size)
  let {defunc_0_map_res_5454 : [n_5307]i64} =
    if <equiv> suff_outer_par_5456
    then {
      let {ldim_5581 : i64} =
        sdiv_up64(n_5307, tile_size_5580)
      let {num_whole_tiles_5595 : i64} =
        squot64(n_5307, tile_size_5580)
      let {residual_input_5715 : i64} =
        srem64(n_5307, tile_size_5580)
      let {cond_5716 : bool} =
        eq_i64(residual_input_5715, 0i64)
      let {binop_x_5726 : i64} =
        mul_nw64(tile_size_5580, num_whole_tiles_5595)
      let {slice_offset_5756 : i64} =
        mul_nw64(num_whole_tiles_5595, residual_input_5715)
      let {defunc_0_map_res_5484 : [n_5307]i64} =
        segmap(group; ; groups=ldim_5581; groupsize=tile_size_5580)
        (gid_5577 < ldim_5581) (~gid_flat_5578) : {i64} {
          let {mergeinit_5601 : [tile_size_5580]i64,
               mergeinit_5602 : [tile_size_5580]i64} =
            segmap(ingroup; )
            (ltid_5596 < tile_size_5580) (~ltid_flat_5597) : {i64, i64} {

              return {returns (private) 0i64,
                      returns (private) 0i64}
            }
          let {binop_x_5680 : i64} =
            mul_nw64(gid_5577, tile_size_5580)
          let {accs_5703 : [tile_size_5580]i64,
               accs_5704 : [tile_size_5580]i64} =
            loop {eta_p_merge_5603 : *[tile_size_5580]i64,
                  eta_p_merge_5604 : *[tile_size_5580]i64} = {mergeinit_5601, mergeinit_5602}
            for tile_id_5605:i64 < num_whole_tiles_5595 do {
              let {binop_x_5666 : i64} =
                mul_nw64(tile_size_5580, tile_id_5605)
              let {full_tile_5663 : [tile_size_5580]i64} =
                segmap(ingroup; )
                (ltid_5664 < tile_size_5580) (~ltid_flat_5665) : {i64} {
                  let {j_5667 : i64} =
                    add_nw64(ltid_5664, binop_x_5666)
                  let {cond_5672 : bool} =
                    slt64(j_5667, n_5307)
                  let {pre1d_5673 : i64} =
                    if cond_5672
                    then {
                      let {tile_elem_5674 : i64} =
                        xs_5308[j_5667]
                      in {tile_elem_5674}
                    } else {0i64}
                    : {i64}
                  return {returns (manifest) pre1d_5673}
                }
              let {acc_5676 : [tile_size_5580]i64,
                   acc_5677 : [tile_size_5580]i64} =
                segmap(ingroup; )
                (ltid_5678 < tile_size_5580) (~ltid_flat_5679) : {i64, i64} {
                  let {gtid_5681 : i64} =
                    add_nw64(ltid_5678, binop_x_5680)
                  let {acc_5684 : i64} =
                    eta_p_merge_5603[ltid_5678]
                  let {acc_5685 : i64} =
                    eta_p_merge_5604[ltid_5678]
                  let {cond_5688 : bool} =
                    slt64(gtid_5681, n_5307)
                  let {acc_5689 : i64,
                       acc_5690 : i64} =
                    if cond_5688
                    then {
                      let {x_5691 : i64,
                           x_5692 : i64} =
                        loop {redout_5796 : i64,
                              redout_5797 : i64} = {acc_5684, acc_5685}
                        for i_5798:i64 < tile_size_5580 do {
                          let {x_5701 : i64} =
                            full_tile_5663[i_5798]
                          let {slice_5803 : i64} =
                            add_nw64(binop_x_5666, i_5798)
                          let {x_5702 : i64} =
                            yss_5309[gtid_5681, slice_5803]
                          let {+_rhs_5697 : i64} =
                            mul64(x_5701, x_5702)
                          let {tmp_5698 : i64} =
                            add64(+_rhs_5697, redout_5796)
                          let {+_lhs_5699 : i64} =
                            add64(x_5701, redout_5797)
                          let {tmp_5700 : i64} =
                            add64(+_lhs_5699, x_5702)
                          in {tmp_5698, tmp_5700}
                        }
                      in {x_5691, x_5692}
                    } else {acc_5684, acc_5685}
                    : {i64,
                       i64}
                  return {returns (private) acc_5689,
                          returns (private) acc_5690}
                }
              in {acc_5676, acc_5677}
            }
          let {acc_after_residual_5775 : [tile_size_5580]i64,
               acc_after_residual_5776 : [tile_size_5580]i64} =
            if cond_5716
            then {accs_5703, accs_5704} else {
              let {full_tile_5736 : [tile_size_5580]i64} =
                segmap(ingroup; )
                (ltid_5717 < tile_size_5580) (~ltid_flat_5718) : {i64} {
                  let {j_5727 : i64} =
                    add_nw64(ltid_5717, binop_x_5726)
                  let {cond_5732 : bool} =
                    slt64(j_5727, n_5307)
                  let {pre1d_5733 : i64} =
                    if cond_5732
                    then {
                      let {tile_elem_5734 : i64} =
                        xs_5308[j_5727]
                      in {tile_elem_5734}
                    } else {0i64}
                    : {i64}
                  return {returns (manifest) pre1d_5733}
                }
              let {acc_5773 : [tile_size_5580]i64,
                   acc_5774 : [tile_size_5580]i64} =
                segmap(ingroup; )
                (ltid_5738 < tile_size_5580) (~ltid_flat_5739) : {i64, i64} {
                  let {gtid_5751 : i64} =
                    add_nw64(binop_x_5680, ltid_5738)
                  let {acc_5754 : i64} =
                    accs_5703[ltid_5738]
                  let {acc_5755 : i64} =
                    accs_5704[ltid_5738]
                  let {cond_5758 : bool} =
                    slt64(gtid_5751, n_5307)
                  let {acc_5759 : i64,
                       acc_5760 : i64} =
                    if cond_5758
                    then {
                      let {x_5761 : i64,
                           x_5762 : i64} =
                        loop {redout_5799 : i64,
                              redout_5800 : i64} = {acc_5754, acc_5755}
                        for i_5801:i64 < residual_input_5715 do {
                          let {x_5771 : i64} =
                            full_tile_5736[i_5801]
                          let {slice_5802 : i64} =
                            add_nw64(slice_offset_5756, i_5801)
                          let {x_5772 : i64} =
                            yss_5309[gtid_5751, slice_5802]
                          let {+_rhs_5767 : i64} =
                            mul64(x_5771, x_5772)
                          let {tmp_5768 : i64} =
                            add64(+_rhs_5767, redout_5799)
                          let {+_lhs_5769 : i64} =
                            add64(x_5771, redout_5800)
                          let {tmp_5770 : i64} =
                            add64(+_lhs_5769, x_5772)
                          in {tmp_5768, tmp_5770}
                        }
                      in {x_5761, x_5762}
                    } else {acc_5754, acc_5755}
                    : {i64,
                       i64}
                  return {returns (private) acc_5759,
                          returns (private) acc_5760}
                }
              in {acc_5773, acc_5774}
            }
            : {[tile_size_5580]i64,
               [tile_size_5580]i64}
          let {thread_res_5795 : [tile_size_5580]i64} =
            segmap(ingroup; )
            (ltid_5777 < tile_size_5580) (~ltid_flat_5778) : {i64} {
              let {gtid_5784 : i64} =
                add_nw64(binop_x_5680, ltid_5777)
              let {cond_5787 : bool} =
                slt64(gtid_5784, n_5307)
              let {postlude_5788 : i64} =
                if cond_5787
                then {
                  let {defunc_0_reduce_comm_res_5785 : i64} =
                    acc_after_residual_5775[ltid_5777]
                  let {defunc_0_reduce_comm_res_5786 : i64} =
                    acc_after_residual_5776[ltid_5777]
                  let {+_lhs_5791 : i64} =
                    xs_5308[defunc_0_reduce_comm_res_5785]
                  let {+_rhs_5792 : i64} =
                    yss_5309[gtid_5784, defunc_0_reduce_comm_res_5786]
                  let {lifted_lambda_res_5793 : i64} =
                    add64(+_lhs_5791, +_rhs_5792)
                  in {lifted_lambda_res_5793}
                } else {0i64}
                : {i64}
              return {returns (private) postlude_5788}
            }
          return {tile(n_5307 / tile_size_5580) thread_res_5795}
        }
      in {defunc_0_map_res_5484}
    } else {
      let {defunc_0_reduce_comm_res_r_5548 : [n_5307]i64,
           defunc_0_reduce_comm_res_r_5549 : [n_5307]i64} =
        segred(thread; ; groups=num_groups_5546; groupsize=segred_group_size_5545)
        (gtid_5550 < n_5307, gtid_5551 < n_5307) (~phys_tid_5552)
        ({0i64, 0i64},
        ,
        commutative \ {eta_p_5553 : i64,
                       eta_p_5554 : i64,
                       eta_p_5555 : i64,
                       eta_p_5556 : i64}
          : {i64,
             i64} ->
          let {+_rhs_5557 : i64} =
            mul64(eta_p_5555, eta_p_5556)
          let {tmp_5558 : i64} =
            add64(eta_p_5553, +_rhs_5557)
          let {+_lhs_5559 : i64} =
            add64(eta_p_5554, eta_p_5555)
          let {tmp_5560 : i64} =
            add64(eta_p_5556, +_lhs_5559)
          in {tmp_5558, tmp_5560})
        : {i64, i64} {
          let {x_5562 : i64} =
            xs_5308[gtid_5551]
          let {x_5563 : i64} =
            yss_5309[gtid_5550, gtid_5551]
          return {returns x_5562,
                  returns x_5563}
        }
      let {segmap_usable_groups_5566 : i64} =
        sdiv_up64(n_5307, segmap_group_size_5565)
      let {defunc_0_map_res_5567 : [n_5307]i64} =
        segmap(thread; ; groups=segmap_usable_groups_5566; groupsize=segmap_group_size_5565)
        (gtid_5568 < n_5307) (~phys_tid_5569) : {i64} {
          let {defunc_0_reduce_comm_res_5571 : i64} =
            defunc_0_reduce_comm_res_r_5548[gtid_5568]
          let {defunc_0_reduce_comm_res_5572 : i64} =
            defunc_0_reduce_comm_res_r_5549[gtid_5568]
          let {+_lhs_5573 : i64} =
            xs_5308[defunc_0_reduce_comm_res_5571]
          let {+_rhs_5574 : i64} =
            yss_5309[gtid_5568, defunc_0_reduce_comm_res_5572]
          let {lifted_lambda_res_5575 : i64} =
            add64(+_lhs_5573, +_rhs_5574)
          return {returns lifted_lambda_res_5575}
        }
      in {defunc_0_map_res_5567}
    }
    : {[n_5307]i64}
  in {defunc_0_map_res_5454}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5484 : {
--     (arr) yss_5309 : {
--         (idx) x_5702 :
--             0 : dependencies = gtid_5681 -> {gid_5577 0 tid, ltid_5678 2 tid}
--             1 : dependencies = slice_5803 -> {tile_id_5605 1 iter, i_5798 3 iter}
--         (idx) x_5772 :
--             0 : dependencies = gtid_5751 -> {gid_5577 0 tid, ltid_5738 1 tid}
--             1 : dependencies = slice_5802 -> {i_5801 2 iter}
--         (idx) +_rhs_5792 :
--             0 : dependencies = gtid_5784 -> {gid_5577 0 tid, ltid_5777 0 tid}
--             1 : dependencies = defunc_0_reduce_comm_res_5786 -> {ltid_5777 0 tid}
--     }
-- }
-- (segmap) defunc_0_map_res_5567 : {
--     (arr) yss_5309 : {
--         (idx) +_rhs_5574 :
--             0 : dependencies = {gtid_5568 1 tid}
--             1 : dependencies = defunc_0_reduce_comm_res_5572 -> {gtid_5568 1 tid}
--     }
-- }
-- (segmap) acc_5676 : {
--     (arr) yss_5309 : {
--         (idx) x_5702 :
--             0 : dependencies = gtid_5681 -> {gid_5577 0 tid, ltid_5678 2 tid}
--             1 : dependencies = slice_5803 -> {tile_id_5605 1 iter, i_5798 3 iter}
--     }
-- }
-- (segmap) acc_5677 : {
--     (arr) yss_5309 : {
--         (idx) x_5702 :
--             0 : dependencies = gtid_5681 -> {gid_5577 0 tid, ltid_5678 2 tid}
--             1 : dependencies = slice_5803 -> {tile_id_5605 1 iter, i_5798 3 iter}
--     }
-- }
-- (segmap) acc_5773 : {
--     (arr) yss_5309 : {
--         (idx) x_5772 :
--             0 : dependencies = gtid_5751 -> {gid_5577 0 tid, ltid_5738 1 tid}
--             1 : dependencies = slice_5802 -> {i_5801 2 iter}
--     }
-- }
-- (segmap) acc_5774 : {
--     (arr) yss_5309 : {
--         (idx) x_5772 :
--             0 : dependencies = gtid_5751 -> {gid_5577 0 tid, ltid_5738 1 tid}
--             1 : dependencies = slice_5802 -> {i_5801 2 iter}
--     }
-- }
-- (segmap) thread_res_5795 : {
--     (arr) yss_5309 : {
--         (idx) +_rhs_5792 :
--             0 : dependencies = gtid_5784 -> {gid_5577 0 tid, ltid_5777 0 tid}
--             1 : dependencies = defunc_0_reduce_comm_res_5786 -> {ltid_5777 0 tid}
--     }
-- }
-- (segred) defunc_0_reduce_comm_res_r_5548 : {
--     (arr) yss_5309 : {
--         (idx) x_5563 :
--             0 : dependencies = {gtid_5550 0 tid}
--             1 : dependencies = {gtid_5551 1 tid}
--     }
-- }
-- (segred) defunc_0_reduce_comm_res_r_5549 : {
--     (arr) yss_5309 : {
--         (idx) x_5563 :
--             0 : dependencies = {gtid_5550 0 tid}
--             1 : dependencies = {gtid_5551 1 tid}
--     }
-- }
