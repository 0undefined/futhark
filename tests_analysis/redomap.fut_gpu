-- Source code:

-- def main [n][m] (xss: [n][m]i64) : [n]i64 =
--   map (reduce (+) 0) xss

-- IR:

types {

}



entry("main",
      {xss: [][]i64},
      {[]i64})
  entry_main (n_5143 : i64,
              m_5144 : i64,
              xss_5145 : [n_5143][m_5144]i64)
  : {[n_5143]i64#([2], [0])} = {
  let {suff_outer_par_5191 : bool} =
    cmp_size(suff_outer_par_0, threshold(def, )) <= n_5143
  let {nest_size_5237 : i64} =
    mul_nw64(n_5143, m_5144)
  let {segred_group_size_5238 : i64} =
    get_size(segred_group_size_5221, group_size)
  let {num_groups_5239 : i64} =
    calc_num_groups(nest_size_5237, segred_num_groups_5223, segred_group_size_5238)
  let {segmap_group_size_5207 : i64} =
    get_size(segmap_group_size_5195, group_size)
  let {defunc_0_map_res_5189 : [n_5143]i64} =
    if <equiv> suff_outer_par_5191
    then {
      let {segmap_usable_groups_5208 : i64} =
        sdiv_up64(n_5143, segmap_group_size_5207)
      let {defunc_0_map_res_5209 : [n_5143]i64} =
        segmap(thread; ; groups=segmap_usable_groups_5208; groupsize=segmap_group_size_5207)
        (gtid_5210 < n_5143) (~phys_tid_5211) : {i64} {
          let {defunc_0_f_res_5213 : i64} =
            loop {redout_5251 : i64} = {0i64}
            for i_5252:i64 < m_5144 do {
              let {x_5217 : i64} =
                xss_5145[gtid_5210, i_5252]
              let {defunc_0_op_res_5216 : i64} =
                add64(x_5217, redout_5251)
              in {defunc_0_op_res_5216}
            }
          return {returns defunc_0_f_res_5213}
        }
      in {defunc_0_map_res_5209}
    } else {
      let {defunc_0_map_res_5241 : [n_5143]i64} =
        segred(thread; ; groups=num_groups_5239; groupsize=segred_group_size_5238)
        (gtid_5242 < n_5143, gtid_5243 < m_5144) (~phys_tid_5244)
        ({0i64},
        ,
        commutative \ {eta_p_5245 : i64,
                       eta_p_5246 : i64}
          : {i64} ->
          let {defunc_0_op_res_5247 : i64} =
            add64(eta_p_5245, eta_p_5246)
          in {defunc_0_op_res_5247})
        : {i64} {
          let {x_5249 : i64} =
            xss_5145[gtid_5242, gtid_5243]
          return {returns x_5249}
        }
      in {defunc_0_map_res_5241}
    }
    : {[n_5143]i64}
  in {defunc_0_map_res_5189}
}

-- === Expected output of analysis: CONFIRMED
-- (segmap) defunc_0_map_res_5209 : {
--     (arr) xss_5145 : [0, 1] {
--         (idx) x_5217 :
--             0 : dependencies = {gtid_5210 0 tid}
--             1 : dependencies = {i_5252 1 iter}
--     }
-- }
-- (segred) defunc_0_map_res_5241 : {
--     (arr) xss_5145 : [0, 1] {
--         (idx) x_5249 :
--             0 : dependencies = {gtid_5242 0 tid}
--             1 : dependencies = {gtid_5243 1 tid}
--     }
-- }
