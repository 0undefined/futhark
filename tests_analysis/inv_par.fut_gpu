-- Source code:

-- def main [n][m] (xss: [n][m]i64) : [m]i64 =
--   #[unsafe]
--   map (\x -> x*2) xss[0]

-- IR:

types {

}



entry("main",
      {xss: [][]i64},
      {[]i64})
  entry_main (n_5109 : i64,
              m_5110 : i64,
              xss_5111 : [n_5109][m_5110]i64)
  : {[m_5110]i64#([2], [0])} = {
  let {segmap_group_size_5146 : i64} =
    get_size(segmap_group_size_5138, group_size)
  let {segmap_usable_groups_5147 : i64} =
    sdiv_up64(m_5110, segmap_group_size_5146)
  let {defunc_0_map_res_5148 : [m_5110]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5147; groupsize=segmap_group_size_5146)
    (gtid_5149 < m_5110) (~phys_tid_5150) : {i64} {
      let {eta_p_5151 : i64} =
        xss_5111[0i64, gtid_5149]
      let {lifted_lambda_res_5152 : i64} =
        mul64(2i64, eta_p_5151)
      return {returns lifted_lambda_res_5152}
    }
  in {defunc_0_map_res_5148}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5148 : {
--     (arr) xss_5111 : {
--         (idx) eta_p_5151 :
--             0 : dependencies = {}
--             1 : dependencies = {gtid_5149 0 tid}
--     }
-- }
