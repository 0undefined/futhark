-- Source code:

-- entry main [m][n][o] (xsss: [m][n][o]i64) : [m]i64 =
--   map ( \x ->
--       #[unsafe]
--       loop s = 0 for i < o do
--         reduce (+) s <| map ( \y ->
--            i + xsss[x][y][i]
--         ) (iota n)
--
--   ) <| iota m

-- IR:

types {

}



entry("main",
      {xsss: [][][]i64},
      {[]i64})
  entry_main (m_5494 : i64,
              n_5495 : i64,
              o_5496 : i64,
              xsss_5497 : [m_5494][n_5495][o_5496]i64)
  : {[m_5494]i64#([3], [0])} = {
  let {suff_outer_par_5751 : bool} =
    cmp_size(suff_outer_par_0, threshold(def, )) <= m_5494
  let {max_group_size_5790 : i64} =
    get_size_max(group_size)
  let {fits_5791 : bool} =
    sle64(n_5495, max_group_size_5790)
  let {suff_intra_par_5789 : bool} =
    cmp_size(suff_intra_par_1, threshold(32, !suff_outer_par_0)) <= n_5495
  let {intra_suff_and_fits_5792 : bool} =
    logand(suff_intra_par_5789, fits_5791)
  let {suff_outer_par_5885 : bool} =
    cmp_size(suff_outer_par_2, threshold(def, !suff_outer_par_0 !suff_intra_par_1)) <= m_5494
  let {segmap_group_size_5903 : i64} =
    get_size(segmap_group_size_5850, group_size)
  let {segmap_group_size_5888 : i64} =
    get_size(segmap_group_size_5816, group_size)
  let {segmap_group_size_5772 : i64} =
    get_size(segmap_group_size_5755, group_size)
  let {segmap_usable_groups_5904 : i64} =
    sdiv_up_safe64(m_5494, segmap_group_size_5903)
  let {segmap_usable_groups_5889 : i64} =
    sdiv_up_safe64(m_5494, segmap_group_size_5888)
  let {defunc_0_f_res_5743 : [m_5494]i64} =
    if <equiv> suff_outer_par_5751
    then {
      let {segmap_usable_groups_5773 : i64} =
        sdiv_up64(m_5494, segmap_group_size_5772)
      let {defunc_0_f_res_5774 : [m_5494]i64} =
        segmap(thread; ; groups=segmap_usable_groups_5773; groupsize=segmap_group_size_5772)
        (gtid_5775 < m_5494) (~phys_tid_5776) : {i64} {
          let {lifted_lambda_res_5778 : i64} =
            loop {s_5780 : i64} = {0i64}
            for i_5779:i64 < o_5496 do {
              let {defunc_0_f_res_5782 : i64} =
                loop {redout_5932 : i64} = {s_5780}
                for i_5933:i64 < n_5495 do {
                  let {xsss_transformed_row_5786 : i64} =
                    xsss_5497[gtid_5775, i_5933, i_5779]
                  let {lifted_lambda_res_5787 : i64} =
                    add64(i_5779, xsss_transformed_row_5786)
                  let {defunc_0_op_res_5785 : i64} =
                    add64(lifted_lambda_res_5787, redout_5932)
                  in {defunc_0_op_res_5785}
                }
              in {defunc_0_f_res_5782}
            }
          return {returns lifted_lambda_res_5778}
        }
      in {defunc_0_f_res_5774}
    } else {
      let {defunc_0_f_res_5918 : [m_5494]i64} =
        if <equiv> intra_suff_and_fits_5792
        then {
          let {defunc_0_f_res_5793 : [m_5494]i64} =
            segmap(group; ; groups=m_5494; groupsize=n_5495)
            (gtid_5794 < m_5494) (~phys_group_id_5795) : {i64} {
              let {lifted_lambda_res_5797 : i64} =
                loop {s_5799 : i64} = {0i64}
                for i_5798:i64 < o_5496 do {
                  let {defunc_0_f_res_5801 : i64} =
                    segred(thread; ; )
                    (gtid_5802 < n_5495) (~phys_tid_5803)
                    ({s_5799},
                    ,
                    \ {eta_p_5804 : i64,
                       eta_p_5805 : i64}
                      : {i64} ->
                      let {defunc_0_op_res_5806 : i64} =
                        add64(eta_p_5804, eta_p_5805)
                      in {defunc_0_op_res_5806})
                    : {i64} {
                      let {xsss_transformed_row_5807 : i64} =
                        xsss_5497[gtid_5794, gtid_5802, i_5798]
                      let {lifted_lambda_res_5808 : i64} =
                        add64(i_5798, xsss_transformed_row_5807)
                      return {returns lifted_lambda_res_5808}
                    }
                  in {defunc_0_f_res_5801}
                }
              return {returns lifted_lambda_res_5797}
            }
          in {defunc_0_f_res_5793}
        } else {
          let {s_expanded_init_5880 : [m_5494]i64} =
            replicate([m_5494], 0i64)
          let {defunc_0_f_res_5881 : [m_5494]i64} =
            loop {s_expanded_5883 : *[m_5494]i64} = {s_expanded_init_5880}
            for i_5882:i64 < o_5496 do {
              let {lifted_lambda_res_5886 : [m_5494]i64} =
                if <equiv> suff_outer_par_5885
                then {
                  let {lifted_lambda_res_5890 : [m_5494]i64} =
                    segmap(thread; ; groups=segmap_usable_groups_5889; groupsize=segmap_group_size_5888)
                    (gtid_5891 < m_5494) (~phys_tid_5892) : {i64} {
                      let {s_5894 : i64} =
                        s_expanded_5883[gtid_5891]
                      let {defunc_0_f_res_5896 : i64} =
                        loop {redout_5934 : i64} = {s_5894}
                        for i_5935:i64 < n_5495 do {
                          let {xsss_transformed_row_5900 : i64} =
                            xsss_5497[gtid_5891, i_5935, i_5882]
                          let {lifted_lambda_res_5901 : i64} =
                            add64(i_5882, xsss_transformed_row_5900)
                          let {defunc_0_op_res_5899 : i64} =
                            add64(lifted_lambda_res_5901, redout_5934)
                          in {defunc_0_op_res_5899}
                        }
                      return {returns defunc_0_f_res_5896}
                    }
                  in {lifted_lambda_res_5890}
                } else {
                  let {lifted_lambda_res_5905 : [m_5494]i64} =
                    segmap(thread; ; groups=segmap_usable_groups_5904; groupsize=segmap_group_size_5903)
                    (gtid_5906 < m_5494) (~phys_tid_5907) : {i64} {
                      let {s_5909 : i64} =
                        s_expanded_5883[gtid_5906]
                      let {defunc_0_f_res_5911 : i64} =
                        loop {redout_5936 : i64} = {s_5909}
                        for i_5937:i64 < n_5495 do {
                          let {xsss_transformed_row_5915 : i64} =
                            xsss_5497[gtid_5906, i_5937, i_5882]
                          let {lifted_lambda_res_5916 : i64} =
                            add64(i_5882, xsss_transformed_row_5915)
                          let {defunc_0_op_res_5914 : i64} =
                            add64(lifted_lambda_res_5916, redout_5936)
                          in {defunc_0_op_res_5914}
                        }
                      return {returns defunc_0_f_res_5911}
                    }
                  in {lifted_lambda_res_5905}
                }
                : {[m_5494]i64}
              in {lifted_lambda_res_5886}
            }
          in {defunc_0_f_res_5881}
        }
        : {[m_5494]i64}
      in {defunc_0_f_res_5918}
    }
    : {[m_5494]i64}
  in {defunc_0_f_res_5743}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_f_res_5774 : {
--     (arr) xsss_5497 : [0, 1, 2] {
--         (idx) xsss_transformed_row_5786 :
--             0 : dependencies = {gtid_5775 0 tid}
--             1 : dependencies = {i_5933 2 iter}
--             2 : dependencies = {i_5779 1 iter}
--     }
-- }
-- (segmap) defunc_0_f_res_5793 : {
--     (arr) xsss_5497 : [0, 1, 2] {
--         (idx) xsss_transformed_row_5807 :
--             0 : dependencies = {gtid_5794 0 tid}
--             1 : dependencies = {gtid_5802 2 tid}
--             2 : dependencies = {i_5798 1 iter}
--     }
-- }
-- (segmap) lifted_lambda_res_5890 : {
--     (arr) xsss_5497 : [0, 1, 2] {
--         (idx) xsss_transformed_row_5900 :
--             0 : dependencies = {gtid_5891 1 tid}
--             1 : dependencies = {i_5935 2 iter}
--             2 : dependencies = {i_5882 0 iter}
--     }
-- }
-- (segmap) lifted_lambda_res_5905 : {
--     (arr) xsss_5497 : [0, 1, 2] {
--         (idx) xsss_transformed_row_5915 :
--             0 : dependencies = {gtid_5906 1 tid}
--             1 : dependencies = {i_5937 2 iter}
--             2 : dependencies = {i_5882 0 iter}
--     }
-- }
-- (segred) defunc_0_f_res_5801 : {
--     (arr) xsss_5497 : [0, 1, 2] {
--         (idx) xsss_transformed_row_5807 :
--             0 : dependencies = {gtid_5794 0 tid}
--             1 : dependencies = {gtid_5802 2 tid}
--             2 : dependencies = {i_5798 1 iter}
--     }
-- }
