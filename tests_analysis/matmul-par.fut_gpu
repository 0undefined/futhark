-- Source code:

-- -- Matrix multiplication
-- def main [n] (xss: [n][n]i32) (yss: [n][n]i32) : [n][n]i32 =
--     map (\xs_row ->
--         map (\ys_col ->
--             -- #[sequential]
--             reduce (+) 0 (map2 (*) xs_row ys_col)
--         ) (transpose yss)
--     ) xss

-- IR:

types {

}



entry("main",
      {xss: [][]i32,
       yss: [][]i32},
      {[][]i32})
  entry_main (n_5384 : i64,
              xss_5385 : [n_5384][n_5384]i32,
              yss_5386 : [n_5384][n_5384]i32)
  : {[n_5384][n_5384]i32#([1, 2], [0])} = {
  let {suff_outer_par_5571 : bool} =
    cmp_size(suff_outer_par_0, threshold(def, )) <= n_5384
  let {comparatee_5682 : i64} =
    mul_nw64(n_5384, n_5384)
  let {suff_outer_par_5683 : bool} =
    cmp_size(suff_outer_par_1, threshold(def, !suff_outer_par_0)) <= comparatee_5682
  let {nest_size_5700 : i64} =
    mul_nw64(n_5384, comparatee_5682)
  let {segred_group_size_5701 : i64} =
    get_size(segred_group_size_5638, group_size)
  let {num_groups_5702 : i64} =
    calc_num_groups(nest_size_5700, segred_num_groups_5640, segred_group_size_5701)
  let {segmap_group_size_5593 : i64} =
    get_size(segmap_group_size_5575, group_size)
  let {num_groups_5594 : i64} =
    calc_num_groups(n_5384, segmap_num_groups_5577, segmap_group_size_5593)
  let {Ty_5724 : i64} =
    get_size(Ty_5721, tile_size)
  let {Ry_5725 : i64} =
    get_size(Ry_5723, reg_tile_size)
  let {Tx_5726 : i64} =
    get_size(Tx_5720, tile_size)
  let {Rx_5727 : i64} =
    get_size(Rx_5722, reg_tile_size)
  let {Tk_5728 : i64} =
    get_size(Tk_5719, tile_size)
  let {TxRx_5731 : i64} =
    mul_nw64(Tx_5726, Rx_5727)
  let {TyRy_5732 : i64} =
    mul_nw64(Ty_5724, Ry_5725)
  let {binop_x_5734 : i64} =
    mul_nw64(Tk_5728, TyRy_5732)
  let {binop_y_5736 : i64} =
    smax64(Tk_5728, TyRy_5732)
  let {a_loc_sz_5737 : i64} =
    add_nw64(binop_x_5734, binop_y_5736)
  let {binop_x_5739 : i64} =
    mul_nw64(Tk_5728, TxRx_5731)
  let {b_loc_sz_5742 : i64} =
    add_nw64(binop_y_5736, binop_x_5739)
  let {group_size_5746 : i64} =
    mul_nw64(Ty_5724, Tx_5726)
  let {binop_y_5905 : i64} =
    add_nw64(1i64, Tk_5728)
  let {binop_y_5916 : i64} =
    add_nw64(1i64, TxRx_5731)
  let {loop_nonempty_6180 : bool} =
    slt64(0i64, Rx_5727)
  let {defunc_0_map_res_5569 : [n_5384][n_5384]i32} =
    if <equiv> suff_outer_par_5571
    then {
      let {defunc_0_map_res_5596 : [n_5384][n_5384]i32} =
        segmap(thread; virtualise; groups=num_groups_5594; groupsize=segmap_group_size_5593)
        (gtid_5597 < n_5384) (~phys_tid_5598) : {[n_5384]i32} {
          let {result_6185 : [n_5384]i32} =
            scratch(i32, n_5384)
          let {defunc_0_map_res_5600 : [n_5384]i32} =
            loop {mapout_6186 : *[n_5384]i32} = {result_6185}
            for i_6187:i64 < n_5384 do {
              let {defunc_0_reduce_res_5602 : i32} =
                loop {redout_6189 : i32} = {0i32}
                for i_6190:i64 < n_5384 do {
                  let {eta_p_5606 : i32} =
                    xss_5385[gtid_5597, i_6190]
                  let {eta_p_5607 : i32} =
                    yss_5386[i_6190, i_6187]
                  let {defunc_0_f_res_5608 : i32} =
                    mul32(eta_p_5606, eta_p_5607)
                  let {defunc_0_op_res_5605 : i32} =
                    add32(defunc_0_f_res_5608, redout_6189)
                  in {defunc_0_op_res_5605}
                }
              let {lw_dest_6188 : [n_5384]i32} =
                mapout_6186 with [i_6187] = defunc_0_reduce_res_5602
              in {lw_dest_6188}
            }
          return {returns defunc_0_map_res_5600}
        }
      in {defunc_0_map_res_5596}
    } else {
      let {defunc_0_map_res_5684 : [n_5384][n_5384]i32} =
        if <equiv> suff_outer_par_5683
        then {
          let {tk_div_tx_5729 : i64} =
            sdiv_up64(Tk_5728, Tx_5726)
          let {gridDim_x_5743 : i64} =
            sdiv_up64(n_5384, TxRx_5731)
          let {gridDim_y_5744 : i64} =
            sdiv_up64(n_5384, TyRy_5732)
          let {grid_size_5745 : i64} =
            mul_nw64(gridDim_x_5743, gridDim_y_5744)
          let {full_tiles_5777 : i64} =
            squot64(n_5384, Tk_5728)
          let {kk_5975 : i64} =
            mul_nw64(Tk_5728, full_tiles_5777)
          let {defunc_0_map_res_5685 : [n_5384][n_5384]i32} =
            segmap(group; ; groups=grid_size_5745; groupsize=group_size_5746)
            (gid_y_5747 < gridDim_y_5744, gid_x_5748 < gridDim_x_5743) (~gid_flat_5749) : {i32} {
              let {iii_5750 : i64} =
                mul_nw64(TyRy_5732, gid_y_5747)
              let {jjj_5751 : i64} =
                mul_nw64(TxRx_5731, gid_x_5748)
              let {cssss_5774 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                segmap(ingroup; full [])
                (ltid_y_5764 < Ty_5724, ltid_x_5763 < Tx_5726) (~ltid_flat_5765) : {[Ry_5725][Rx_5727]i32} {
                  let {css_init_5766 : [Ry_5725][Rx_5727]i32} =
                    scratch(i32, Ry_5725, Rx_5727)
                  let {loop_5767 : [Ry_5725][Rx_5727]i32} =
                    loop {merge_5769 : *[Ry_5725][Rx_5727]i32} = {css_init_5766}
                    for i_5768:i64 < Ry_5725 do {
                      let {loop_5770 : [Ry_5725][Rx_5727]i32} =
                        loop {merge_5772 : *[Ry_5725][Rx_5727]i32} = {merge_5769}
                        for i_5771:i64 < Rx_5727 do {
                          let {css_5773 : [Ry_5725][Rx_5727]i32} =
                            merge_5772 with [i_5768, i_5771] = 0i32
                          in {css_5773}
                        }
                      in {loop_5770}
                    }
                  return {returns (private) loop_5767}
                }
              let {A_loc_5775 : [a_loc_sz_5737]i32} =
                scratch(i32, a_loc_sz_5737)
              let {B_loc_5776 : [b_loc_sz_5742]i32} =
                scratch(i32, b_loc_sz_5742)
              let {loop_5972 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32,
                   loop_5973 : [a_loc_sz_5737]i32,
                   loop_5974 : [b_loc_sz_5742]i32} =
                loop {merge_5779 : *[Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32,
                      merge_5780 : *[a_loc_sz_5737]i32,
                      merge_5781 : *[b_loc_sz_5742]i32} = {cssss_5774, A_loc_5775, B_loc_5776}
                for i_5778:i64 < full_tiles_5777 do {
                  let {kk_5782 : i64} =
                    mul_nw64(Tk_5728, i_5778)
                  let {as_transformed_row_glb2loc_5825 : [a_loc_sz_5737]i32} =
                    segmap(ingroup; full [0, 1])
                    (ltid_seq_5806 < Rx_5727, ltid_seq_5807 < tk_div_tx_5729, ltid_y_5804 < Tx_5726, ltid_x_5805 < Tx_5726) (~ltid_flat_5803) : {[a_loc_sz_5737]i32} {
                      let {binop_y_5808 : i64} =
                        mul_nw64(Tx_5726, ltid_seq_5807)
                      let {k_5809 : i64} =
                        add_nw64(ltid_x_5805, binop_y_5808)
                      let {binop_y_5810 : i64} =
                        mul_nw64(Tx_5726, ltid_seq_5806)
                      let {i_5811 : i64} =
                        add_nw64(ltid_y_5804, binop_y_5810)
                      let {gtid_5812 : i64} =
                        add_nw64(iii_5750, i_5811)
                      let {as_transformed_row_seqdim_idx_5813 : i64} =
                        add_nw64(kk_5782, k_5809)
                      let {cond_5814 : bool} =
                        slt64(gtid_5812, n_5384)
                      let {as_transformed_row_elem_5815 : i32} =
                        if cond_5814
                        then {
                          let {A_elem_5817 : i32} =
                            xss_5385[gtid_5812, as_transformed_row_seqdim_idx_5813]
                          in {A_elem_5817}
                        } else {0i32}
                        : {i32}
                      let {cond_5819 : bool} =
                        slt64(k_5809, Tk_5728)
                      let {as_transformed_row_loc_ind_5820 : i64} =
                        if cond_5819
                        then {
                          let {binop_y_5821 : i64} =
                            add_nw64(1i64, Tk_5728)
                          let {binop_y_5822 : i64} =
                            mul_nw64(i_5811, binop_y_5821)
                          let {x_5823 : i64} =
                            add_nw64(k_5809, binop_y_5822)
                          in {x_5823}
                        } else {-1i64}
                        : {i64}
                      return {merge_5780
                              with ([as_transformed_row_loc_ind_5820] = as_transformed_row_elem_5815)}
                    }
                  let {as_transformed_row_glb2loc_5868 : [b_loc_sz_5742]i32} =
                    segmap(ingroup; full [0, 1])
                    (ltid_seq_5849 < Rx_5727, ltid_seq_5850 < tk_div_tx_5729, ltid_y_5847 < Tx_5726, ltid_x_5848 < Tx_5726) (~ltid_flat_5846) : {[b_loc_sz_5742]i32} {
                      let {binop_y_5851 : i64} =
                        mul_nw64(Tx_5726, ltid_seq_5850)
                      let {k_5852 : i64} =
                        add_nw64(ltid_y_5847, binop_y_5851)
                      let {binop_y_5853 : i64} =
                        mul_nw64(Tx_5726, ltid_seq_5849)
                      let {i_5854 : i64} =
                        add_nw64(ltid_x_5848, binop_y_5853)
                      let {gtid_5855 : i64} =
                        add_nw64(jjj_5751, i_5854)
                      let {as_transformed_row_seqdim_idx_5856 : i64} =
                        add_nw64(kk_5782, k_5852)
                      let {cond_5857 : bool} =
                        slt64(gtid_5855, n_5384)
                      let {as_transformed_row_elem_5858 : i32} =
                        if cond_5857
                        then {
                          let {A_elem_5860 : i32} =
                            yss_5386[as_transformed_row_seqdim_idx_5856, gtid_5855]
                          in {A_elem_5860}
                        } else {0i32}
                        : {i32}
                      let {cond_5862 : bool} =
                        slt64(k_5852, Tk_5728)
                      let {as_transformed_row_loc_ind_5863 : i64} =
                        if cond_5862
                        then {
                          let {binop_y_5864 : i64} =
                            add_nw64(1i64, TxRx_5731)
                          let {binop_y_5865 : i64} =
                            mul_nw64(k_5852, binop_y_5864)
                          let {x_5866 : i64} =
                            add_nw64(i_5854, binop_y_5865)
                          in {x_5866}
                        } else {-1i64}
                        : {i64}
                      return {merge_5781
                              with ([as_transformed_row_loc_ind_5863] = as_transformed_row_elem_5858)}
                    }
                  let {loop_5971 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                    loop {merge_5870 : *[Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} = {merge_5779}
                    for i_5869:i64 < Tk_5728 do {
                      let {binop_y_5917 : i64} =
                        mul_nw64(i_5869, binop_y_5916)
                      let {reg_mem_5921 : [Ty_5724][Tx_5726][Rx_5727]i32,
                           reg_mem_5922 : [Ty_5724][Tx_5726][Rx_5727]i32} =
                        segmap(ingroup; full [])
                        (ltid_y_5897 < Ty_5724, ltid_x_5896 < Tx_5726) (~ltid_flat_5898) : {[Rx_5727]i32, [Rx_5727]i32} {
                          let {as_transformed_row_init_regs_5899 : [Rx_5727]i32} =
                            scratch(i32, Rx_5727)
                          let {binop_x_5903 : i64} =
                            mul_nw64(Rx_5727, ltid_y_5897)
                          let {loop_5900 : [Rx_5727]i32} =
                            loop {merge_5902 : *[Rx_5727]i32} = {as_transformed_row_init_regs_5899}
                            for i_5901:i64 < Rx_5727 do {
                              let {binop_x_5904 : i64} =
                                add_nw64(i_5901, binop_x_5903)
                              let {binop_y_5906 : i64} =
                                mul_nw64(binop_x_5904, binop_y_5905)
                              let {as_transformed_row_loc_ind_5907 : i64} =
                                add_nw64(i_5869, binop_y_5906)
                              let {as_transformed_row_loc_elem_slice_6184 : [1i64]i32} =
                                as_transformed_row_glb2loc_5825[as_transformed_row_loc_ind_5907 :+ 1i64 * 1i64]
                              let {as_transformed_row_regs_5909 : [Rx_5727]i32} =
                                merge_5902 with [i_5901 :+ 1i64 * 1i64] = as_transformed_row_loc_elem_slice_6184
                              in {as_transformed_row_regs_5909}
                            }
                          let {as_transformed_row_init_regs_5910 : [Rx_5727]i32} =
                            scratch(i32, Rx_5727)
                          let {binop_y_5914 : i64} =
                            mul_nw64(Rx_5727, ltid_x_5896)
                          let {loop_5911 : [Rx_5727]i32} =
                            loop {merge_5913 : *[Rx_5727]i32} = {as_transformed_row_init_regs_5910}
                            for i_5912:i64 < Rx_5727 do {
                              let {binop_x_5915 : i64} =
                                add_nw64(i_5912, binop_y_5914)
                              let {as_transformed_row_loc_ind_5918 : i64} =
                                add_nw64(binop_x_5915, binop_y_5917)
                              let {as_transformed_row_loc_elem_slice_6183 : [1i64]i32} =
                                as_transformed_row_glb2loc_5868[as_transformed_row_loc_ind_5918 :+ 1i64 * 1i64]
                              let {as_transformed_row_regs_5920 : [Rx_5727]i32} =
                                merge_5913 with [i_5912 :+ 1i64 * 1i64] = as_transformed_row_loc_elem_slice_6183
                              in {as_transformed_row_regs_5920}
                            }
                          return {returns (private) loop_5900,
                                  returns (private) loop_5911}
                        }
                      let {redomap_res_5969 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                        segmap(ingroup; full [])
                        (ltid_y_5947 < Ty_5724, ltid_x_5946 < Tx_5726) (~ltid_flat_5948) : {[Ry_5725][Rx_5727]i32} {
                          let {css_init_5951 : [Ry_5725][Rx_5727]i32} =
                            merge_5870[ltid_y_5947, ltid_x_5946, 0i64 :+ Ry_5725 * 1i64, 0i64 :+ Rx_5727 * 1i64]
                          let {loop_5952 : [Ry_5725][Rx_5727]i32} =
                            loop {merge_5954 : *[Ry_5725][Rx_5727]i32} = {css_init_5951}
                            for i_5953:i64 < Ry_5725 do {
                              let {a_5959 : i32} =
                                if <fallback> loop_nonempty_6180
                                then {
                                  let {x_6181 : i32} =
                                    reg_mem_5921[ltid_y_5947, ltid_x_5946, i_5953]
                                  in {x_6181}
                                } else {0i32}
                                : {i32}
                              let {loop_5955 : [Ry_5725][Rx_5727]i32} =
                                loop {merge_5957 : *[Ry_5725][Rx_5727]i32} = {merge_5954}
                                for i_5956:i64 < Rx_5727 do {
                                  let {b_5960 : i32} =
                                    reg_mem_5922[ltid_y_5947, ltid_x_5946, i_5956]
                                  let {c_5961 : i32} =
                                    merge_5957[i_5953, i_5956]
                                  let {defunc_0_f_res_5964 : i32} =
                                    mul32(a_5959, b_5960)
                                  let {defunc_0_op_res_5967 : i32} =
                                    add32(c_5961, defunc_0_f_res_5964)
                                  let {css_5968 : [Ry_5725][Rx_5727]i32} =
                                    merge_5957 with [i_5953, i_5956] = defunc_0_op_res_5967
                                  in {css_5968}
                                }
                              in {loop_5955}
                            }
                          return {returns (private) loop_5952}
                        }
                      in {redomap_res_5969}
                    }
                  in {loop_5971, as_transformed_row_glb2loc_5825, as_transformed_row_glb2loc_5868}
                }
              let {as_transformed_row_glb2loc_6022 : [a_loc_sz_5737]i32} =
                segmap(ingroup; full [0, 1])
                (ltid_seq_6001 < Rx_5727, ltid_seq_6002 < tk_div_tx_5729, ltid_y_5999 < Tx_5726, ltid_x_6000 < Tx_5726) (~ltid_flat_5998) : {[a_loc_sz_5737]i32} {
                  let {binop_y_6003 : i64} =
                    mul_nw64(Tx_5726, ltid_seq_6002)
                  let {k_6004 : i64} =
                    add_nw64(ltid_x_6000, binop_y_6003)
                  let {binop_y_6005 : i64} =
                    mul_nw64(Tx_5726, ltid_seq_6001)
                  let {i_6006 : i64} =
                    add_nw64(ltid_y_5999, binop_y_6005)
                  let {gtid_6007 : i64} =
                    add_nw64(iii_5750, i_6006)
                  let {as_transformed_row_seqdim_idx_6008 : i64} =
                    add_nw64(kk_5975, k_6004)
                  let {binop_x_6009 : bool} =
                    slt64(gtid_6007, n_5384)
                  let {binop_y_6010 : bool} =
                    slt64(as_transformed_row_seqdim_idx_6008, n_5384)
                  let {cond_6011 : bool} =
                    logand(binop_x_6009, binop_y_6010)
                  let {as_transformed_row_elem_6012 : i32} =
                    if cond_6011
                    then {
                      let {A_elem_6014 : i32} =
                        xss_5385[gtid_6007, as_transformed_row_seqdim_idx_6008]
                      in {A_elem_6014}
                    } else {0i32}
                    : {i32}
                  let {cond_6016 : bool} =
                    slt64(k_6004, Tk_5728)
                  let {as_transformed_row_loc_ind_6017 : i64} =
                    if cond_6016
                    then {
                      let {binop_y_6018 : i64} =
                        add_nw64(1i64, Tk_5728)
                      let {binop_y_6019 : i64} =
                        mul_nw64(i_6006, binop_y_6018)
                      let {x_6020 : i64} =
                        add_nw64(k_6004, binop_y_6019)
                      in {x_6020}
                    } else {-1i64}
                    : {i64}
                  return {loop_5973
                          with ([as_transformed_row_loc_ind_6017] = as_transformed_row_elem_6012)}
                }
              let {as_transformed_row_glb2loc_6069 : [b_loc_sz_5742]i32} =
                segmap(ingroup; full [0, 1])
                (ltid_seq_6048 < Rx_5727, ltid_seq_6049 < tk_div_tx_5729, ltid_y_6046 < Tx_5726, ltid_x_6047 < Tx_5726) (~ltid_flat_6045) : {[b_loc_sz_5742]i32} {
                  let {binop_y_6050 : i64} =
                    mul_nw64(Tx_5726, ltid_seq_6049)
                  let {k_6051 : i64} =
                    add_nw64(ltid_y_6046, binop_y_6050)
                  let {binop_y_6052 : i64} =
                    mul_nw64(Tx_5726, ltid_seq_6048)
                  let {i_6053 : i64} =
                    add_nw64(ltid_x_6047, binop_y_6052)
                  let {gtid_6054 : i64} =
                    add_nw64(jjj_5751, i_6053)
                  let {as_transformed_row_seqdim_idx_6055 : i64} =
                    add_nw64(kk_5975, k_6051)
                  let {binop_x_6056 : bool} =
                    slt64(gtid_6054, n_5384)
                  let {binop_y_6057 : bool} =
                    slt64(as_transformed_row_seqdim_idx_6055, n_5384)
                  let {cond_6058 : bool} =
                    logand(binop_x_6056, binop_y_6057)
                  let {as_transformed_row_elem_6059 : i32} =
                    if cond_6058
                    then {
                      let {A_elem_6061 : i32} =
                        yss_5386[as_transformed_row_seqdim_idx_6055, gtid_6054]
                      in {A_elem_6061}
                    } else {0i32}
                    : {i32}
                  let {cond_6063 : bool} =
                    slt64(k_6051, Tk_5728)
                  let {as_transformed_row_loc_ind_6064 : i64} =
                    if cond_6063
                    then {
                      let {binop_y_6065 : i64} =
                        add_nw64(1i64, TxRx_5731)
                      let {binop_y_6066 : i64} =
                        mul_nw64(k_6051, binop_y_6065)
                      let {x_6067 : i64} =
                        add_nw64(i_6053, binop_y_6066)
                      in {x_6067}
                    } else {-1i64}
                    : {i64}
                  return {loop_5974
                          with ([as_transformed_row_loc_ind_6064] = as_transformed_row_elem_6059)}
                }
              let {loop_6174 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                loop {merge_6071 : *[Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} = {loop_5972}
                for i_6070:i64 < Tk_5728 do {
                  let {cmpop_x_6072 : i64} =
                    add_nw64(kk_5975, i_6070)
                  let {cond_6073 : bool} =
                    slt64(cmpop_x_6072, n_5384)
                  let {foo_6173 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                    if cond_6073
                    then {
                      let {binop_y_6108 : i64} =
                        add_nw64(1i64, Tk_5728)
                      let {binop_y_6119 : i64} =
                        add_nw64(1i64, TxRx_5731)
                      let {binop_y_6120 : i64} =
                        mul_nw64(i_6070, binop_y_6119)
                      let {reg_mem_6124 : [Ty_5724][Tx_5726][Rx_5727]i32,
                           reg_mem_6125 : [Ty_5724][Tx_5726][Rx_5727]i32} =
                        segmap(ingroup; full [])
                        (ltid_y_6100 < Ty_5724, ltid_x_6099 < Tx_5726) (~ltid_flat_6101) : {[Rx_5727]i32, [Rx_5727]i32} {
                          let {as_transformed_row_init_regs_6102 : [Rx_5727]i32} =
                            scratch(i32, Rx_5727)
                          let {binop_x_6106 : i64} =
                            mul_nw64(Rx_5727, ltid_y_6100)
                          let {loop_6103 : [Rx_5727]i32} =
                            loop {merge_6105 : *[Rx_5727]i32} = {as_transformed_row_init_regs_6102}
                            for i_6104:i64 < Rx_5727 do {
                              let {binop_x_6107 : i64} =
                                add_nw64(i_6104, binop_x_6106)
                              let {binop_y_6109 : i64} =
                                mul_nw64(binop_x_6107, binop_y_6108)
                              let {as_transformed_row_loc_ind_6110 : i64} =
                                add_nw64(i_6070, binop_y_6109)
                              let {as_transformed_row_loc_elem_slice_6179 : [1i64]i32} =
                                as_transformed_row_glb2loc_6022[as_transformed_row_loc_ind_6110 :+ 1i64 * 1i64]
                              let {as_transformed_row_regs_6112 : [Rx_5727]i32} =
                                merge_6105 with [i_6104 :+ 1i64 * 1i64] = as_transformed_row_loc_elem_slice_6179
                              in {as_transformed_row_regs_6112}
                            }
                          let {as_transformed_row_init_regs_6113 : [Rx_5727]i32} =
                            scratch(i32, Rx_5727)
                          let {binop_y_6117 : i64} =
                            mul_nw64(Rx_5727, ltid_x_6099)
                          let {loop_6114 : [Rx_5727]i32} =
                            loop {merge_6116 : *[Rx_5727]i32} = {as_transformed_row_init_regs_6113}
                            for i_6115:i64 < Rx_5727 do {
                              let {binop_x_6118 : i64} =
                                add_nw64(i_6115, binop_y_6117)
                              let {as_transformed_row_loc_ind_6121 : i64} =
                                add_nw64(binop_x_6118, binop_y_6120)
                              let {as_transformed_row_loc_elem_slice_6178 : [1i64]i32} =
                                as_transformed_row_glb2loc_6069[as_transformed_row_loc_ind_6121 :+ 1i64 * 1i64]
                              let {as_transformed_row_regs_6123 : [Rx_5727]i32} =
                                merge_6116 with [i_6115 :+ 1i64 * 1i64] = as_transformed_row_loc_elem_slice_6178
                              in {as_transformed_row_regs_6123}
                            }
                          return {returns (private) loop_6103,
                                  returns (private) loop_6114}
                        }
                      let {loop_nonempty_6175 : bool} =
                        slt64(0i64, Rx_5727)
                      let {redomap_res_6172 : [Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32} =
                        segmap(ingroup; full [])
                        (ltid_y_6150 < Ty_5724, ltid_x_6149 < Tx_5726) (~ltid_flat_6151) : {[Ry_5725][Rx_5727]i32} {
                          let {css_init_6154 : [Ry_5725][Rx_5727]i32} =
                            merge_6071[ltid_y_6150, ltid_x_6149, 0i64 :+ Ry_5725 * 1i64, 0i64 :+ Rx_5727 * 1i64]
                          let {loop_6155 : [Ry_5725][Rx_5727]i32} =
                            loop {merge_6157 : *[Ry_5725][Rx_5727]i32} = {css_init_6154}
                            for i_6156:i64 < Ry_5725 do {
                              let {a_6162 : i32} =
                                if <fallback> loop_nonempty_6175
                                then {
                                  let {x_6176 : i32} =
                                    reg_mem_6124[ltid_y_6150, ltid_x_6149, i_6156]
                                  in {x_6176}
                                } else {0i32}
                                : {i32}
                              let {loop_6158 : [Ry_5725][Rx_5727]i32} =
                                loop {merge_6160 : *[Ry_5725][Rx_5727]i32} = {merge_6157}
                                for i_6159:i64 < Rx_5727 do {
                                  let {b_6163 : i32} =
                                    reg_mem_6125[ltid_y_6150, ltid_x_6149, i_6159]
                                  let {c_6164 : i32} =
                                    merge_6160[i_6156, i_6159]
                                  let {defunc_0_f_res_6167 : i32} =
                                    mul32(a_6162, b_6163)
                                  let {defunc_0_op_res_6170 : i32} =
                                    add32(c_6164, defunc_0_f_res_6167)
                                  let {css_6171 : [Ry_5725][Rx_5727]i32} =
                                    merge_6160 with [i_6156, i_6159] = defunc_0_op_res_6170
                                  in {css_6171}
                                }
                              in {loop_6158}
                            }
                          return {returns (private) loop_6155}
                        }
                      in {redomap_res_6172}
                    } else {merge_6071}
                    : {[Ty_5724][Tx_5726][Ry_5725][Rx_5727]i32}
                  in {foo_6173}
                }
              return {blkreg_tile(n_5384 / (Ty_5724 * Ry_5725), n_5384 / (Tx_5726 * Rx_5727)) loop_6174}
            }
          in {defunc_0_map_res_5685}
        } else {
          let {defunc_0_map_res_5704 : [n_5384][n_5384]i32} =
            segred(thread; ; groups=num_groups_5702; groupsize=segred_group_size_5701)
            (gtid_5705 < n_5384, gtid_5706 < n_5384, gtid_5707 < n_5384) (~phys_tid_5708)
            ({0i32},
            ,
            commutative \ {eta_p_5709 : i32,
                           eta_p_5710 : i32}
              : {i32} ->
              let {defunc_0_op_res_5711 : i32} =
                add32(eta_p_5709, eta_p_5710)
              in {defunc_0_op_res_5711})
            : {i32} {
              let {eta_p_5714 : i32} =
                xss_5385[gtid_5705, gtid_5707]
              let {eta_p_5715 : i32} =
                yss_5386[gtid_5707, gtid_5706]
              let {defunc_0_f_res_5716 : i32} =
                mul32(eta_p_5714, eta_p_5715)
              return {returns defunc_0_f_res_5716}
            }
          in {defunc_0_map_res_5704}
        }
        : {[n_5384][n_5384]i32}
      in {defunc_0_map_res_5684}
    }
    : {[n_5384][n_5384]i32}
  in {defunc_0_map_res_5569}
}

-- === Expected output of analysis: CONFIRMED
-- (segmap) defunc_0_map_res_5596 : {
--     (arr) xss_5385 : [0, 1] {
--         (idx) eta_p_5606 :
--             0 : dependencies = {gtid_5597 0 tid}
--             1 : dependencies = {i_6190 2 iter}
--     }
--     (arr) yss_5386 : [0, 1] {
--         (idx) eta_p_5607 :
--             0 : dependencies = {i_6190 2 iter}
--             1 : dependencies = {i_6187 1 iter}
--     }
-- }
-- (segmap) defunc_0_map_res_5685 : {
--     (arr) xss_5385 : [0, 1] {
--         (idx) A_elem_5817 :
--             0 : dependencies = gtid_5812 -> {gid_y_5747 0 tid, ltid_y_5804 6 tid, ltid_seq_5806 4 tid}
--             1 : dependencies = as_transformed_row_seqdim_idx_5813 -> {i_5778 3 iter, ltid_x_5805 7 tid, ltid_seq_5807 5 tid}
--         (idx) A_elem_6014 :
--             0 : dependencies = gtid_6007 -> {gid_y_5747 0 tid, ltid_y_5999 5 tid, ltid_seq_6001 3 tid}
--             1 : dependencies = as_transformed_row_seqdim_idx_6008 -> {ltid_x_6000 6 tid, ltid_seq_6002 4 tid}
--     }
--     (arr) yss_5386 : [0, 1] {
--         (idx) A_elem_5860 :
--             0 : dependencies = as_transformed_row_seqdim_idx_5856 -> {i_5778 3 iter, ltid_y_5847 9 tid, ltid_seq_5850 8 tid}
--             1 : dependencies = gtid_5855 -> {gid_x_5748 1 tid, ltid_x_5848 10 tid, ltid_seq_5849 7 tid}
--         (idx) A_elem_6061 :
--             0 : dependencies = as_transformed_row_seqdim_idx_6055 -> {ltid_y_6046 8 tid, ltid_seq_6049 7 tid}
--             1 : dependencies = gtid_6054 -> {gid_x_5748 1 tid, ltid_x_6047 9 tid, ltid_seq_6048 6 tid}
--     }
--     (arr) merge_5772 : [0, 1] {
--         (idx) css_5773 :
--             0 : dependencies = {i_5768 4 iter}
--             1 : dependencies = {i_5771 5 iter}
--     }
--     (arr) merge_5870 : [0, 1, 2, 3] {
--         (idx) css_init_5951 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {slice_0 14 iter}
--             3 : dependencies = {slice_0 14 iter}
--     }
--     (arr) reg_mem_5921 : [0, 1, 2] {
--         (idx) x_6181 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {i_5953 14 iter}
--     }
--     (arr) reg_mem_5922 : [0, 1, 2] {
--         (idx) b_5960 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {i_5956 14 iter}
--     }
--     (arr) merge_5957 : [0, 1] {
--         (idx) c_5961 :
--             0 : dependencies = {i_5953 14 iter}
--             1 : dependencies = {i_5956 14 iter}
--         (idx) css_5968 :
--             0 : dependencies = {i_5953 14 iter}
--             1 : dependencies = {i_5956 14 iter}
--     }
--     (arr) merge_6071 : [0, 1, 2, 3] {
--         (idx) css_init_6154 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {slice_0 13 iter}
--             3 : dependencies = {slice_0 13 iter}
--     }
--     (arr) reg_mem_6124 : [0, 1, 2] {
--         (idx) x_6176 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {i_6156 13 iter}
--     }
--     (arr) reg_mem_6125 : [0, 1, 2] {
--         (idx) b_6163 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {i_6159 13 iter}
--     }
--     (arr) merge_6160 : [0, 1] {
--         (idx) c_6164 :
--             0 : dependencies = {i_6156 13 iter}
--             1 : dependencies = {i_6159 13 iter}
--         (idx) css_6171 :
--             0 : dependencies = {i_6156 13 iter}
--             1 : dependencies = {i_6159 13 iter}
--     }
-- }
-- (segmap) cssss_5774 : {
--     (arr) merge_5772 : [0, 1] {
--         (idx) css_5773 :
--             0 : dependencies = {i_5768 4 iter}
--             1 : dependencies = {i_5771 5 iter}
--     }
-- }
-- (segmap) as_transformed_row_glb2loc_5825 : {
--     (arr) xss_5385 : [0, 1] {
--         (idx) A_elem_5817 :
--             0 : dependencies = gtid_5812 -> {gid_y_5747 0 tid, ltid_y_5804 6 tid, ltid_seq_5806 4 tid}
--             1 : dependencies = as_transformed_row_seqdim_idx_5813 -> {i_5778 3 iter, ltid_x_5805 7 tid, ltid_seq_5807 5 tid}
--     }
-- }
-- (segmap) as_transformed_row_glb2loc_5868 : {
--     (arr) yss_5386 : [0, 1] {
--         (idx) A_elem_5860 :
--             0 : dependencies = as_transformed_row_seqdim_idx_5856 -> {i_5778 3 iter, ltid_y_5847 9 tid, ltid_seq_5850 8 tid}
--             1 : dependencies = gtid_5855 -> {gid_x_5748 1 tid, ltid_x_5848 10 tid, ltid_seq_5849 7 tid}
--     }
-- }
-- (segmap) redomap_res_5969 : {
--     (arr) merge_5870 : [0, 1, 2, 3] {
--         (idx) css_init_5951 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {slice_0 14 iter}
--             3 : dependencies = {slice_0 14 iter}
--     }
--     (arr) reg_mem_5921 : [0, 1, 2] {
--         (idx) x_6181 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {i_5953 14 iter}
--     }
--     (arr) reg_mem_5922 : [0, 1, 2] {
--         (idx) b_5960 :
--             0 : dependencies = {ltid_y_5947 12 tid}
--             1 : dependencies = {ltid_x_5946 13 tid}
--             2 : dependencies = {i_5956 14 iter}
--     }
--     (arr) merge_5957 : [0, 1] {
--         (idx) c_5961 :
--             0 : dependencies = {i_5953 14 iter}
--             1 : dependencies = {i_5956 14 iter}
--         (idx) css_5968 :
--             0 : dependencies = {i_5953 14 iter}
--             1 : dependencies = {i_5956 14 iter}
--     }
-- }
-- (segmap) as_transformed_row_glb2loc_6022 : {
--     (arr) xss_5385 : [0, 1] {
--         (idx) A_elem_6014 :
--             0 : dependencies = gtid_6007 -> {gid_y_5747 0 tid, ltid_y_5999 5 tid, ltid_seq_6001 3 tid}
--             1 : dependencies = as_transformed_row_seqdim_idx_6008 -> {ltid_x_6000 6 tid, ltid_seq_6002 4 tid}
--     }
-- }
-- (segmap) as_transformed_row_glb2loc_6069 : {
--     (arr) yss_5386 : [0, 1] {
--         (idx) A_elem_6061 :
--             0 : dependencies = as_transformed_row_seqdim_idx_6055 -> {ltid_y_6046 8 tid, ltid_seq_6049 7 tid}
--             1 : dependencies = gtid_6054 -> {gid_x_5748 1 tid, ltid_x_6047 9 tid, ltid_seq_6048 6 tid}
--     }
-- }
-- (segmap) redomap_res_6172 : {
--     (arr) merge_6071 : [0, 1, 2, 3] {
--         (idx) css_init_6154 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {slice_0 13 iter}
--             3 : dependencies = {slice_0 13 iter}
--     }
--     (arr) reg_mem_6124 : [0, 1, 2] {
--         (idx) x_6176 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {i_6156 13 iter}
--     }
--     (arr) reg_mem_6125 : [0, 1, 2] {
--         (idx) b_6163 :
--             0 : dependencies = {ltid_y_6150 11 tid}
--             1 : dependencies = {ltid_x_6149 12 tid}
--             2 : dependencies = {i_6159 13 iter}
--     }
--     (arr) merge_6160 : [0, 1] {
--         (idx) c_6164 :
--             0 : dependencies = {i_6156 13 iter}
--             1 : dependencies = {i_6159 13 iter}
--         (idx) css_6171 :
--             0 : dependencies = {i_6156 13 iter}
--             1 : dependencies = {i_6159 13 iter}
--     }
-- }
-- (segred) defunc_0_map_res_5704 : {
--     (arr) xss_5385 : [0, 1] {
--         (idx) eta_p_5714 :
--             0 : dependencies = {gtid_5705 0 tid}
--             1 : dependencies = {gtid_5707 2 tid}
--     }
--     (arr) yss_5386 : [0, 1] {
--         (idx) eta_p_5715 :
--             0 : dependencies = {gtid_5707 2 tid}
--             1 : dependencies = {gtid_5706 1 tid}
--     }
-- }
