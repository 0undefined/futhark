-- Source code:

-- def main [l][m][n][o] (xsss: [l][m][n][o]i64) : [l][m]i64 =
--     map (\i ->
--         map (\j ->
--             #[unsafe]
--             loop r=0 for k < n do
--                 r + loop r=0 for h < n do
--                     r + foldl (+) 0 xsss[i+j+k][h][i*j*k*h]
--         ) (iota m)
--     ) (iota l)

-- IR:

types {

}



entry("main",
      {xsss: [][][][]i64},
      {[][]i64})
  entry_main (l_5479 : i64,
              m_5480 : i64,
              n_5481 : i64,
              o_5482 : i64,
              xsss_5483 : [l_5479][m_5480][n_5481][o_5482]i64)
  : {[l_5479][m_5480]i64#([4], [0])} = {
  let {nest_size_5829 : i64} =
    mul_nw64(l_5479, m_5480)
  let {segmap_group_size_5830 : i64} =
    get_size(segmap_group_size_5770, group_size)
  let {segmap_usable_groups_5831 : i64} =
    sdiv_up64(nest_size_5829, segmap_group_size_5830)
  let {defunc_0_map_res_5832 : [l_5479][m_5480]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5831; groupsize=segmap_group_size_5830)
    (gtid_5833 < l_5479, gtid_5834 < m_5480) (~phys_tid_5835) : {i64} {
      let {+_lhs_5838 : i64} =
        add64(gtid_5833, gtid_5834)
      let {*_lhs_5839 : i64} =
        mul64(gtid_5833, gtid_5834)
      let {lifted_lambda_res_5840 : i64} =
        loop {r_5842 : i64} = {0i64}
        for k_5841:i64 < n_5481 do {
          let {foldl_arg2_5843 : i64} =
            add64(+_lhs_5838, k_5841)
          let {*_lhs_5844 : i64} =
            mul64(*_lhs_5839, k_5841)
          let {+_rhs_5845 : i64} =
            loop {r_5847 : i64} = {0i64}
            for h_5846:i64 < n_5481 do {
              let {foldl_arg2_5848 : i64} =
                mul64(*_lhs_5844, h_5846)
              let {defunc_0_foldl_res_5849 : i64} =
                loop {acc_5851 : i64} = {0i64}
                for i_5850:i64 < o_5482 do {
                  let {b_5852 : i64} =
                    xsss_5483[foldl_arg2_5843, h_5846, foldl_arg2_5848, i_5850]
                  let {defunc_0_f_res_5853 : i64} =
                    add64(acc_5851, b_5852)
                  in {defunc_0_f_res_5853}
                }
              let {loopres_5854 : i64} =
                add64(r_5847, defunc_0_foldl_res_5849)
              in {loopres_5854}
            }
          let {loopres_5855 : i64} =
            add64(r_5842, +_rhs_5845)
          in {loopres_5855}
        }
      return {returns lifted_lambda_res_5840}
    }
  in {defunc_0_map_res_5832}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5832 : {
--     (arr) xsss_5483 : {
--         (idx) b_5852 :
--             0 : dependencies = foldl_arg2_5843 -> {gtid_5833 0 tid, gtid_5834 1 tid, k_5841 2 iter}
--             1 : dependencies = {h_5846 3 iter}
--             2 : dependencies = foldl_arg2_5848 -> {gtid_5833 0 tid, gtid_5834 1 tid, k_5841 2 iter, h_5846 3 iter}
--             3 : dependencies = {i_5850 4 iter}
--     }
-- }
