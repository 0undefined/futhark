-- Source code:

-- -- Sum rows in a matrix
-- def main [n] (xss: [n][n]i32) : [n]i32 =
-- --   #[incremental_flattening(no_intra)]
-- --   #[incremental_flattening(only_inner)]
--     -- map i32.sum xss
--     map (\xs ->
--         loop acc=0 for i < n do
--             acc + xs[i]
--     ) xss

-- IR:

types {

}



entry("main",
      {xss: [][]i32},
      {[]i32})
  entry_main (n_5126 : i64,
              xss_5127 : [n_5126][n_5126]i32)
  : {[n_5126]i32#([1], [0])} = {
  let {segmap_group_size_5181 : i64} =
    get_size(segmap_group_size_5169, group_size)
  let {segmap_usable_groups_5182 : i64} =
    sdiv_up64(n_5126, segmap_group_size_5181)
  let {defunc_0_map_res_5183 : [n_5126]i32} =
    segmap(thread; ; groups=segmap_usable_groups_5182; groupsize=segmap_group_size_5181)
    (gtid_5184 < n_5126) (~phys_tid_5185) : {i32} {
      let {lifted_lambda_res_5187 : i32} =
        loop {acc_5189 : i32} = {0i32}
        for i_5188:i64 < n_5126 do {
          let {+_rhs_5190 : i32} =
            xss_5127[gtid_5184, i_5188]
          let {loopres_5191 : i32} =
            add32(acc_5189, +_rhs_5190)
          in {loopres_5191}
        }
      return {returns lifted_lambda_res_5187}
    }
  in {defunc_0_map_res_5183}
}

-- === Expected output of analysis: CONFIRMED
-- (segmap) defunc_0_map_res_5183 : {
--     (arr) xss_5127 : [0, 1] {
--         (idx) +_rhs_5190 :
--             0 : dependencies = {gtid_5184 0 tid}
--             1 : dependencies = {i_5188 1 iter}
--     }
-- }
