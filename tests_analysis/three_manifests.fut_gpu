-- Source code:

-- entry main [m][n] (xss: [m][n]i64) =
--     map(\xs ->
--     foldl (+) 0 xs
--     + foldl (*) 2 xs
--     + foldl (-) 0 xs

-- IR:

types {
  
}



entry("main",
      {xss: [][]i64},
      {*[]i64})
  entry_main (m_5261 : i64,
              n_5262 : i64,
              xss_5263 : [m_5261][n_5262]i64)
  : {*[m_5261]i64} = {
  let {segmap_group_size_5417 : i64} =
    get_size(segmap_group_size_5393, group_size)
  let {segmap_usable_groups_5418 : i64} =
    sdiv_up64(m_5261, segmap_group_size_5417)
  let {defunc_0_map_res_5419 : [m_5261]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5418; groupsize=segmap_group_size_5417)
    (gtid_5420 < m_5261) (~phys_tid_5421) : {i64} {
      let {defunc_0_foldl_res_5423 : i64} =
        loop {acc_5425 : i64} = {0i64}
        for i_5424:i64 < n_5262 do {
          let {b_5426 : i64} =
            xss_5263[gtid_5420, i_5424]
          let {defunc_0_f_res_5427 : i64} =
            add64(acc_5425, b_5426)
          in {defunc_0_f_res_5427}
        }
      let {defunc_0_foldl_res_5428 : i64} =
        loop {acc_5430 : i64} = {2i64}
        for i_5429:i64 < n_5262 do {
          let {b_5431 : i64} =
            xss_5263[gtid_5420, i_5429]
          let {defunc_0_f_res_5432 : i64} =
            mul64(acc_5430, b_5431)
          in {defunc_0_f_res_5432}
        }
      let {+_lhs_5433 : i64} =
        add64(defunc_0_foldl_res_5423, defunc_0_foldl_res_5428)
      let {defunc_0_foldl_res_5434 : i64} =
        loop {acc_5436 : i64} = {0i64}
        for i_5435:i64 < n_5262 do {
          let {b_5437 : i64} =
            xss_5263[gtid_5420, i_5435]
          let {defunc_0_f_res_5438 : i64} =
            sub64(acc_5436, b_5437)
          in {defunc_0_f_res_5438}
        }
      let {lifted_lambda_res_5439 : i64} =
        add64(+_lhs_5433, defunc_0_foldl_res_5434)
      return {returns lifted_lambda_res_5439}
    }
  in {defunc_0_map_res_5419}
}

-- === Expected output of analysis:

