-- Source code:

-- def main [n][m] (xss: [n][m]i64) : [n]i64 =
--   map (foldl (+) 0) xss

-- IR:

types {

}



entry("main",
      {xss: [][]i64},
      {[]i64})
  entry_main (n_5142 : i64,
              m_5143 : i64,
              xss_5144 : [n_5142][m_5143]i64)
  : {[n_5142]i64#([2], [0])} = {
  let {segmap_group_size_5202 : i64} =
    get_size(segmap_group_size_5190, group_size)
  let {segmap_usable_groups_5203 : i64} =
    sdiv_up64(n_5142, segmap_group_size_5202)
  let {defunc_0_map_res_5204 : [n_5142]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5203; groupsize=segmap_group_size_5202)
    (gtid_5205 < n_5142) (~phys_tid_5206) : {i64} {
      let {defunc_0_f_res_5208 : i64} =
        loop {acc_5210 : i64} = {0i64}
        for i_5209:i64 < m_5143 do {
          let {b_5211 : i64} =
            xss_5144[gtid_5205, i_5209]
          let {defunc_0_f_res_5212 : i64} =
            add64(acc_5210, b_5211)
          in {defunc_0_f_res_5212}
        }
      return {returns defunc_0_f_res_5208}
    }
  in {defunc_0_map_res_5204}
}

-- === Expected output of analysis: CONFIRMED
-- (segmap) defunc_0_map_res_5204 : {
--     (arr) xss_5144 : [0, 1] {
--         (idx) b_5211 :
--             0 : dependencies = {gtid_5205 0 tid}
--             1 : dependencies = {i_5209 1 iter}
--     }
-- }
