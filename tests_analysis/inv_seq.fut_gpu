-- Source code:

-- def main [l][n][m] (xsss: [l][n][m]i64) : [l]i64 =
--   map (\xss ->
--     loop res=0 for i < m do
--       #[unsafe]
--       res + xss[0][i]
--   ) xsss

-- IR:

types {

}



entry("main",
      {xsss: [][][]i64},
      {[]i64})
  entry_main (l_5159 : i64,
              n_5160 : i64,
              m_5161 : i64,
              xsss_5162 : [l_5159][n_5160][m_5161]i64)
  : {[l_5159]i64#([3], [0])} = {
  let {segmap_group_size_5222 : i64} =
    get_size(segmap_group_size_5210, group_size)
  let {segmap_usable_groups_5223 : i64} =
    sdiv_up64(l_5159, segmap_group_size_5222)
  let {defunc_0_map_res_5224 : [l_5159]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5223; groupsize=segmap_group_size_5222)
    (gtid_5225 < l_5159) (~phys_tid_5226) : {i64} {
      let {lifted_lambda_res_5228 : i64} =
        loop {res_5230 : i64} = {0i64}
        for i_5229:i64 < m_5161 do {
          let {+_rhs_5231 : i64} =
            xsss_5162[gtid_5225, 0i64, i_5229]
          let {loopres_5232 : i64} =
            add64(res_5230, +_rhs_5231)
          in {loopres_5232}
        }
      return {returns lifted_lambda_res_5228}
    }
  in {defunc_0_map_res_5224}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5224 : {
--     (arr) xsss_5162 : [0, 1, 2] {
--         (idx) +_rhs_5231 :
--             0 : dependencies = {gtid_5225 0 tid}
--             1 : dependencies = {}
--             2 : dependencies = {i_5229 1 iter}
--     }
-- }
