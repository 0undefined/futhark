-- Source code:

-- def main [l][n][m] (xsss: [l][n][m]i64) : [l][n]i64 =
--   map (\xss ->
--     map (reduce (+) 0) xss
--   ) xsss

-- IR:

types {

}



entry("main",
      {xsss: [][][]i64},
      {[][]i64})
  entry_main (l_5236 : i64,
              n_5237 : i64,
              m_5238 : i64,
              xsss_5239 : [l_5236][n_5237][m_5238]i64)
  : {[l_5236][n_5237]i64#([3], [0])} = {
  let {suff_outer_par_5338 : bool} =
    cmp_size(suff_outer_par_0, threshold(def, )) <= l_5236
  let {nest_size_5434 : i64} =
    mul_nw64(l_5236, n_5237)
  let {segmap_group_size_5435 : i64} =
    get_size(segmap_group_size_5377, group_size)
  let {suff_outer_par_5439 : bool} =
    cmp_size(suff_outer_par_1, threshold(def, !suff_outer_par_0)) <= nest_size_5434
  let {nest_size_5453 : i64} =
    mul_nw64(m_5238, nest_size_5434)
  let {segred_group_size_5454 : i64} =
    get_size(segred_group_size_5398, group_size)
  let {num_groups_5455 : i64} =
    calc_num_groups(nest_size_5453, segred_num_groups_5400, segred_group_size_5454)
  let {segmap_group_size_5358 : i64} =
    get_size(segmap_group_size_5342, group_size)
  let {num_groups_5359 : i64} =
    calc_num_groups(l_5236, segmap_num_groups_5344, segmap_group_size_5358)
  let {defunc_0_map_res_5336 : [l_5236][n_5237]i64} =
    if <equiv> suff_outer_par_5338
    then {
      let {defunc_0_map_res_5361 : [l_5236][n_5237]i64} =
        segmap(thread; virtualise; groups=num_groups_5359; groupsize=segmap_group_size_5358)
        (gtid_5362 < l_5236) (~phys_tid_5363) : {[n_5237]i64} {
          let {result_5470 : [n_5237]i64} =
            scratch(i64, n_5237)
          let {defunc_0_map_res_5365 : [n_5237]i64} =
            loop {mapout_5471 : *[n_5237]i64} = {result_5470}
            for i_5472:i64 < n_5237 do {
              let {defunc_0_f_res_5367 : i64} =
                loop {redout_5474 : i64} = {0i64}
                for i_5475:i64 < m_5238 do {
                  let {x_5371 : i64} =
                    xsss_5239[gtid_5362, i_5472, i_5475]
                  let {defunc_0_op_res_5370 : i64} =
                    add64(x_5371, redout_5474)
                  in {defunc_0_op_res_5370}
                }
              let {lw_dest_5473 : [n_5237]i64} =
                mapout_5471 with [i_5472] = defunc_0_f_res_5367
              in {lw_dest_5473}
            }
          return {returns defunc_0_map_res_5365}
        }
      in {defunc_0_map_res_5361}
    } else {
      let {segmap_usable_groups_5436 : i64} =
        sdiv_up64(nest_size_5434, segmap_group_size_5435)
      let {defunc_0_map_res_5440 : [l_5236][n_5237]i64} =
        if <equiv> suff_outer_par_5439
        then {
          let {defunc_0_map_res_5441 : [l_5236][n_5237]i64} =
            segmap(thread; ; groups=segmap_usable_groups_5436; groupsize=segmap_group_size_5435)
            (gtid_5442 < l_5236, gtid_5443 < n_5237) (~phys_tid_5444) : {i64} {
              let {defunc_0_f_res_5446 : i64} =
                loop {redout_5476 : i64} = {0i64}
                for i_5477:i64 < m_5238 do {
                  let {x_5450 : i64} =
                    xsss_5239[gtid_5442, gtid_5443, i_5477]
                  let {defunc_0_op_res_5449 : i64} =
                    add64(x_5450, redout_5476)
                  in {defunc_0_op_res_5449}
                }
              return {returns defunc_0_f_res_5446}
            }
          in {defunc_0_map_res_5441}
        } else {
          let {defunc_0_map_res_5457 : [l_5236][n_5237]i64} =
            segred(thread; ; groups=num_groups_5455; groupsize=segred_group_size_5454)
            (gtid_5458 < l_5236, gtid_5459 < n_5237, gtid_5460 < m_5238) (~phys_tid_5461)
            ({0i64},
            ,
            commutative \ {eta_p_5462 : i64,
                           eta_p_5463 : i64}
              : {i64} ->
              let {defunc_0_op_res_5464 : i64} =
                add64(eta_p_5462, eta_p_5463)
              in {defunc_0_op_res_5464})
            : {i64} {
              let {x_5467 : i64} =
                xsss_5239[gtid_5458, gtid_5459, gtid_5460]
              return {returns x_5467}
            }
          in {defunc_0_map_res_5457}
        }
        : {[l_5236][n_5237]i64}
      in {defunc_0_map_res_5440}
    }
    : {[l_5236][n_5237]i64}
  in {defunc_0_map_res_5336}
}

-- === Expected output of analysis: CONFIRMED
-- (segmap) defunc_0_map_res_5361 : {
--     (arr) xsss_5239 : [0, 1, 2] {
--         (idx) x_5371 :
--             0 : dependencies = {gtid_5362 0 tid}
--             1 : dependencies = {i_5472 1 iter}
--             2 : dependencies = {i_5475 2 iter}
--     }
-- }
-- (segmap) defunc_0_map_res_5441 : {
--     (arr) xsss_5239 : [0, 1, 2] {
--         (idx) x_5450 :
--             0 : dependencies = {gtid_5442 0 tid}
--             1 : dependencies = {gtid_5443 1 tid}
--             2 : dependencies = {i_5477 2 iter}
--     }
-- }
-- (segred) defunc_0_map_res_5457 : {
--     (arr) xsss_5239 : [0, 1, 2] {
--         (idx) x_5467 :
--             0 : dependencies = {gtid_5458 0 tid}
--             1 : dependencies = {gtid_5459 1 tid}
--             2 : dependencies = {gtid_5460 2 tid}
--     }
-- }
