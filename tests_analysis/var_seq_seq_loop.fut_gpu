-- Source code:

-- def main [n][m] (xss: [n][m]i32) : i32 =
--   #[unsafe]
--   loop r0=0 for i < n
--   do
--     r0 +
--     loop r1=0 for j < m
--     do
--         r1 + xss[i,j]

-- IR:

types {

}



entry("main",
      {xss: [][]i32},
      {i32})
  entry_main (n_5097 : i64,
              m_5098 : i64,
              xss_5099 : [n_5097][m_5098]i32)
  : {i32} = {
  let {const_dev_5114 : [1i64]i32} =
    replicate([1i64], 0i32)
  let {main_res_dev_5113 : [1i64]i32} =
    loop {r0_5115 : [1i64]i32} = {const_dev_5114}
    for i_5105:i64 < n_5097 do {
      let {+_rhs_dev_5116 : [1i64]i32} =
        loop {r1_5118 : [1i64]i32} = {const_dev_5114}
        for j_5108:i64 < m_5098 do {
          let {loopres_dev_5124 : [1i64]i32} =
            gpu : {i32} {
              let {+_rhs_5119 : i32} =
                xss_5099[i_5105, j_5108]
              let {r1_5121 : i32} =
                r1_5118[0i64]
              let {loopres_5123 : i32} =
                add32(+_rhs_5119, r1_5121)
              in {loopres_5123}
            }
          in {loopres_dev_5124}
        }
      let {loopres_dev_5128 : [1i64]i32} =
        gpu : {i32} {
          let {r0_5125 : i32} =
            r0_5115[0i64]
          let {+_rhs_5126 : i32} =
            +_rhs_dev_5116[0i64]
          let {loopres_5127 : i32} =
            add32(r0_5125, +_rhs_5126)
          in {loopres_5127}
        }
      in {loopres_dev_5128}
    }
  let {main_res_5104 : i32} =
    main_res_dev_5113[0i64]
  in {main_res_5104}
}

-- === Expected output of analysis: CONFIRMED
