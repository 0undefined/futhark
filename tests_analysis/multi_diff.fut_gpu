-- Source code:

-- def main [l][n][m] (xsss: [l][n][m]i64) : [l]i64 =
--     map2 (\xss i -> #[unsafe] xss[0,i]) xsss (iota l)

-- IR:

types {

}



entry("main",
      {xsss: [][][]i64},
      {[]i64})
  entry_main (l_5299 : i64,
              n_5300 : i64,
              m_5301 : i64,
              xsss_5302 : [l_5299][n_5300][m_5301]i64)
  : {[l_5299]i64#([3], [0])} = {
  let {segmap_group_size_5382 : i64} =
    get_size(segmap_group_size_5373, group_size)
  let {segmap_usable_groups_5383 : i64} =
    sdiv_up64(l_5299, segmap_group_size_5382)
  let {defunc_0_map_res_5384 : [l_5299]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5383; groupsize=segmap_group_size_5382)
    (gtid_5385 < l_5299) (~phys_tid_5386) : {i64} {
      let {lifted_lambda_res_5389 : i64} =
        xsss_5302[gtid_5385, 0i64, gtid_5385]
      return {returns lifted_lambda_res_5389}
    }
  in {defunc_0_map_res_5384}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5384 : {
--     (arr) xsss_5302 : {
--         (idx) lifted_lambda_res_5389 :
--             0 : dependencies = {gtid_5385 0 tid}
--             1 : dependencies = {}
--             2 : dependencies = {gtid_5385 0 tid}
--     }
-- }
