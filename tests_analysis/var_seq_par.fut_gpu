-- Source code:

-- def main [n][m] (xss: [n][m]i64) : [m]i64 =
--     foldl (cc xs -> map2 ( x -> x+a) acc xs) (replicate m 0) xss

-- IR:

types {

}



entry("main",
      {xss: [][]i64},
      {[]i64})
  entry_main (n_5344 : i64,
              m_5345 : i64,
              xss_5346 : [n_5344][m_5345]i64)
  : {[m_5345]i64#([2], [0])} = {
  let {defunc_0_map_res_5424 : [m_5345]i64} =
    replicate([m_5345], 0i64)
  let {segmap_group_size_5449 : i64} =
    get_size(segmap_group_size_5440, group_size)
  let {segmap_usable_groups_5450 : i64} =
    sdiv_up_safe64(m_5345, segmap_group_size_5449)
  let {defunc_0_foldl_res_5425 : [m_5345]i64} =
    loop {acc_5427 : [m_5345]i64} = {defunc_0_map_res_5424}
    for i_5426:i64 < n_5344 do {
      let {defunc_0_map_res_5451 : [m_5345]i64} =
        segmap(thread; ; groups=segmap_usable_groups_5450; groupsize=segmap_group_size_5449)
        (gtid_5452 < m_5345) (~phys_tid_5453) : {i64} {
          let {eta_p_5454 : i64} =
            acc_5427[gtid_5452]
          let {eta_p_5455 : i64} =
            xss_5346[i_5426, gtid_5452]
          let {lifted_lambda_res_5456 : i64} =
            add64(eta_p_5454, eta_p_5455)
          return {returns lifted_lambda_res_5456}
        }
      in {defunc_0_map_res_5451}
    }
  in {defunc_0_foldl_res_5425}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5451 : {
--     (arr) xss_5346 : {
--         (idx) eta_p_5455 :
--             0 : dependencies = {i_5426 0 iter}
--             1 : dependencies = {gtid_5452 1 tid}
--     }
-- }
