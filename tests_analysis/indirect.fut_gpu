-- Source code:

-- def main [n][m] (is: [m]i64) (xss: [n][m]i64) : [n]i64 =
--   map (\xs ->
--     #[unsafe]
--     loop s=0 for i < m
--     do
--       s + xs[ is[ i ] ]
--   ) xss

-- IR:

types {

}



entry("main",
      {is: []i64,
       xss: [][]i64},
      {[]i64})
  entry_main (m_5155 : i64,
              n_5156 : i64,
              is_5157 : [m_5155]i64,
              xss_5158 : [n_5156][m_5155]i64)
  : {[n_5156]i64#([2, 3], [0])} = {
  let {segmap_group_size_5229 : i64} =
    get_size(segmap_group_size_5216, group_size)
  let {segmap_usable_groups_5230 : i64} =
    sdiv_up64(n_5156, segmap_group_size_5229)
  let {defunc_0_map_res_5231 : [n_5156]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5230; groupsize=segmap_group_size_5229)
    (gtid_5232 < n_5156) (~phys_tid_5233) : {i64} {
      let {lifted_lambda_res_5235 : i64} =
        loop {s_5237 : i64} = {0i64}
        for i_5236:i64 < m_5155 do {
          let {+_rhs_5238 : i64} =
            is_5157[i_5236]
          let {+_rhs_5239 : i64} =
            xss_5158[gtid_5232, +_rhs_5238]
          let {loopres_5240 : i64} =
            add64(s_5237, +_rhs_5239)
          in {loopres_5240}
        }
      return {returns lifted_lambda_res_5235}
    }
  in {defunc_0_map_res_5231}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_5231 : {
--     (arr) xss_5158 : {
--         (idx) +_rhs_5239 :
--             0 : dependencies = {gtid_5232 0 tid}
--             1 : dependencies = +_rhs_5238 -> {i_5236 1 iter}
--     }
-- }
