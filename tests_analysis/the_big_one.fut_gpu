-- Source code:

-- def main [l][m][n][o] (xsss: [l][m][n][o]i64) (is: [n]i64) (is2: [m]i64) =
--     #[unsafe]
--     map (\xss ->
--         loop res=xss[0] for i < m do
--             map2 (s xs ->
--                 let wew = loop r=[xs[0]+rs[0]] for j < n do
--                     r ++ [xs[i*j]+rs[i+j]]
--                 let wew = wew :>[o]i64
--                 in wew
--             ) res xss[is2[i]]
--     ) xsss

-- IR:

types {

}



entry("main",
      {xsss: [][][][]i64,
       is: []i64,
       is2: []i64},
      {*[][][]i64})
  entry_main (l_5716 : i64,
              m_5717 : i64,
              n_5718 : i64,
              o_5719 : i64,
              xsss_5720 : [l_5716][m_5717][n_5718][o_5719]i64,
              is_5721 : [n_5718]i64,
              is2_5722 : [m_5717]i64)
  : {*[l_5716][n_5718][o_5719]i64} = {
  let {index_6244 : [l_5716][n_5718][o_5719]i64} =
    xsss_5720[0i64 :+ l_5716 * 1i64, 0i64, 0i64 :+ n_5718 * 1i64, 0i64 :+ o_5719 * 1i64]
  let {max_group_size_6288 : i64} =
    get_size_max(group_size)
  let {fits_6289 : bool} =
    sle64(n_5718, max_group_size_6288)
  let {suff_intra_par_6287 : bool} =
    cmp_size(suff_intra_par_0, threshold(32, )) <= n_5718
  let {intra_suff_and_fits_6290 : bool} =
    logand(suff_intra_par_6287, fits_6289)
  let {nest_size_6503 : i64} =
    mul_nw64(l_5716, n_5718)
  let {segmap_group_size_6504 : i64} =
    get_size(segmap_group_size_6390, group_size)
  let {segmap_usable_groups_6505 : i64} =
    sdiv_up_safe64(nest_size_6503, segmap_group_size_6504)
  let {segmap_group_size_6520 : i64} =
    get_size(segmap_group_size_6356, group_size)
  let {num_groups_6521 : i64} =
    calc_num_groups(nest_size_6503, segmap_num_groups_6358, segmap_group_size_6520)
  let {defunc_0_map_res_6243 : [l_5716][n_5718][o_5719]i64} =
    if <equiv> intra_suff_and_fits_6290
    then {
      let {defunc_0_map_res_6291 : [l_5716][n_5718][o_5719]i64} =
        segmap(group; ; groups=l_5716; groupsize=n_5718)
        (gtid_6292 < l_5716) (~phys_group_id_6293) : {[n_5718][o_5719]i64} {
          let {as_transformed_transformed_row_6296 : [n_5718][o_5719]i64} =
            xsss_5720[gtid_6292, 0i64, 0i64 :+ n_5718 * 1i64, 0i64 :+ o_5719 * 1i64]
          let {lifted_lambda_res_6298 : [n_5718][o_5719]i64} =
            loop {res_6300 : [n_5718][o_5719]i64} = {as_transformed_transformed_row_6296}
            for i_6299:i64 < m_5717 do {
              let {map2_arg2_6301 : i64} =
                is2_5722[i_6299]
              let {wew_r_6303 : [n_5718]i64} =
                segmap(thread; ; )
                (gtid_6304 < n_5718) (~phys_tid_6305) : {i64} {
                  let {+_lhs_6308 : i64} =
                    xsss_5720[gtid_6292, map2_arg2_6301, gtid_6304, 0i64]
                  let {+_rhs_6309 : i64} =
                    res_6300[gtid_6304, 0i64]
                  let {wew_6310 : i64} =
                    add64(+_lhs_6308, +_rhs_6309)
                  return {returns wew_6310}
                }
              let {wew_r_tr_rep_6312 : [1i64][n_5718]i64} =
                replicate([1i64], wew_r_6303)
              let {loop_init_r_6313 : [n_5718][1i64]i64} =
                rearrange((1, 0), wew_r_tr_rep_6312)
              let {defunc_0_map_res_6314 : [n_5718][o_5719]i64} =
                segmap(thread; ; )
                (gtid_6315 < n_5718) (~phys_tid_6316) : {[o_5719]i64} {
                  let {loop_init_6319 : [1i64]i64} =
                    loop_init_r_6313[gtid_6315, 0i64 :+ 1i64 * 1i64]
                  let {wew_6320 : i64,
                       wew_6321 : [wew_6320]i64} =
                    loop {loop_d₂₀_6323 : i64,
                          r_6324 : [loop_d₂₀_6323]i64} = {1i64, loop_init_6319}
                    for j_6322:i64 < n_5718 do {
                      let {+_lhs_6325 : i64} =
                        mul64(i_6299, j_6322)
                      let {+_lhs_6326 : i64} =
                        xsss_5720[gtid_6292, map2_arg2_6301, gtid_6315, +_lhs_6325]
                      let {+_rhs_6327 : i64} =
                        add64(i_6299, j_6322)
                      let {+_rhs_6328 : i64} =
                        res_6300[gtid_6315, +_rhs_6327]
                      let {++_rhs_6329 : i64} =
                        add64(+_lhs_6326, +_rhs_6328)
                      let {++_arg_6330 : [1i64]i64} =
                        replicate([1i64], ++_rhs_6329)
                      let {conc_tmp_6331 : i64} =
                        add_nw64(1i64, loop_d₂₀_6323)
                      let {++_res_6332 : [conc_tmp_6331]i64} =
                        concat@0(conc_tmp_6331, r_6324, ++_arg_6330)
                      in {conc_tmp_6331, ++_res_6332}
                    }
                  let {result_proper_shape_6333 : [o_5719]i64} =
                    coerce([o_5719], wew_6321)
                  return {returns result_proper_shape_6333}
                }
              in {defunc_0_map_res_6314}
            }
          return {returns lifted_lambda_res_6298}
        }
      in {defunc_0_map_res_6291}
    } else {
      let {res_expanded_inter_copy_6491 : [l_5716][n_5718][o_5719]i64} =
        copy(index_6244)
      let {defunc_0_map_res_6492 : [l_5716][n_5718][o_5719]i64} =
        loop {res_expanded_6494 : *[l_5716][n_5718][o_5719]i64} = {res_expanded_inter_copy_6491}
        for i_6493:i64 < m_5717 do {
          let {map2_arg2_dev_6549 : [1i64]i64} =
            gpu : {i64} {
              let {map2_arg2_6548 : i64} =
                is2_5722[i_6493]
              in {map2_arg2_6548}
            }
          let {wew_r_r_6506 : [l_5716][n_5718]i64} =
            segmap(thread; ; groups=segmap_usable_groups_6505; groupsize=segmap_group_size_6504)
            (gtid_6507 < l_5716, gtid_6508 < n_5718) (~phys_tid_6509) : {i64} {
              let {map2_arg2_6550 : i64} =
                map2_arg2_dev_6549[0i64]
              let {+_lhs_6512 : i64} =
                xsss_5720[gtid_6507, map2_arg2_6550, gtid_6508, 0i64]
              let {+_rhs_6513 : i64} =
                res_expanded_6494[gtid_6507, gtid_6508, 0i64]
              let {wew_6514 : i64} =
                add64(+_lhs_6512, +_rhs_6513)
              return {returns wew_6514}
            }
          let {wew_r_r_tr_rep_6516 : [1i64][l_5716][n_5718]i64} =
            replicate([1i64], wew_r_r_6506)
          let {loop_init_r_r_6517 : [l_5716][n_5718][1i64]i64} =
            rearrange((1, 2, 0), wew_r_r_tr_rep_6516)
          let {lifted_lambda_res_6523 : [l_5716][n_5718][o_5719]i64} =
            segmap(thread; virtualise; groups=num_groups_6521; groupsize=segmap_group_size_6520)
            (gtid_6524 < l_5716, gtid_6525 < n_5718) (~phys_tid_6526) : {[o_5719]i64} {
              let {map2_arg2_6551 : i64} =
                map2_arg2_dev_6549[0i64]
              let {loop_init_6529 : [1i64]i64} =
                loop_init_r_r_6517[gtid_6524, gtid_6525, 0i64 :+ 1i64 * 1i64]
              let {wew_6530 : i64,
                   wew_6531 : [wew_6530]i64} =
                loop {loop_d₂₀_6533 : i64,
                      r_6534 : [loop_d₂₀_6533]i64} = {1i64, loop_init_6529}
                for j_6532:i64 < n_5718 do {
                  let {+_lhs_6535 : i64} =
                    mul64(i_6493, j_6532)
                  let {+_lhs_6536 : i64} =
                    xsss_5720[gtid_6524, map2_arg2_6551, gtid_6525, +_lhs_6535]
                  let {+_rhs_6537 : i64} =
                    add64(i_6493, j_6532)
                  let {+_rhs_6538 : i64} =
                    res_expanded_6494[gtid_6524, gtid_6525, +_rhs_6537]
                  let {++_rhs_6539 : i64} =
                    add64(+_lhs_6536, +_rhs_6538)
                  let {++_arg_6540 : [1i64]i64} =
                    replicate([1i64], ++_rhs_6539)
                  let {conc_tmp_6541 : i64} =
                    add_nw64(1i64, loop_d₂₀_6533)
                  let {++_res_6542 : [conc_tmp_6541]i64} =
                    concat@0(conc_tmp_6541, r_6534, ++_arg_6540)
                  in {conc_tmp_6541, ++_res_6542}
                }
              let {result_proper_shape_6543 : [o_5719]i64} =
                coerce([o_5719], wew_6531)
              return {returns result_proper_shape_6543}
            }
          in {lifted_lambda_res_6523}
        }
      in {defunc_0_map_res_6492}
    }
    : {[l_5716][n_5718][o_5719]i64}
  in {defunc_0_map_res_6243}
}

-- === Expected output of analysis:
-- (segmap) defunc_0_map_res_6291 : {
--     (arr) xsss_5720 : {
--         (idx) +_lhs_6308 :
--             0 : dependencies = {gtid_6292 0 tid}
--             1 : dependencies = {map2_arg2_6301 i_6299 1 iter}
--             2 : dependencies = {gtid_6304 2 tid}
--             3 : dependencies = {}
--         (idx) +_lhs_6326 :
--             0 : dependencies = {gtid_6292 0 tid}
--             1 : dependencies = {map2_arg2_6301 i_6299 1 iter}
--             2 : dependencies = {gtid_6315 2 tid}
--             3 : dependencies = {+_lhs_6325 i_6299 1 iter, +_lhs_6325 j_6322 3 iter}
--     }
--     (arr) (res_6300, [defunc_0_map_res_6243 : cond, defunc_0_map_res_6291 : segmap]) : {
--         (idx) +_rhs_6309 :
--             0 : dependencies = {gtid_6304 2 tid}
--             1 : dependencies = {}
--         (idx) +_rhs_6328 :
--             0 : dependencies = {gtid_6315 2 tid}
--             1 : dependencies = {+_rhs_6327 i_6299 1 iter, +_rhs_6327 j_6322 3 iter}
--     }
-- }
-- (segmap) wew_r_6303 : {
--     (arr) xsss_5720 : {
--         (idx) +_lhs_6308 :
--             0 : dependencies = {gtid_6292 0 tid}
--             1 : dependencies = {map2_arg2_6301 i_6299 1 iter}
--             2 : dependencies = {gtid_6304 2 tid}
--             3 : dependencies = {}
--     }
--     (arr) (res_6300, [defunc_0_map_res_6243 : cond, defunc_0_map_res_6291 : segmap]) : {
--         (idx) +_rhs_6309 :
--             0 : dependencies = {gtid_6304 2 tid}
--             1 : dependencies = {}
--     }
-- }
-- (segmap) defunc_0_map_res_6314 : {
--     (arr) xsss_5720 : {
--         (idx) +_lhs_6326 :
--             0 : dependencies = {gtid_6292 0 tid}
--             1 : dependencies = {map2_arg2_6301 i_6299 1 iter}
--             2 : dependencies = {gtid_6315 2 tid}
--             3 : dependencies = {+_lhs_6325 i_6299 1 iter, +_lhs_6325 j_6322 3 iter}
--     }
--     (arr) (res_6300, [defunc_0_map_res_6243 : cond, defunc_0_map_res_6291 : segmap]) : {
--         (idx) +_rhs_6328 :
--             0 : dependencies = {gtid_6315 2 tid}
--             1 : dependencies = {+_rhs_6327 i_6299 1 iter, +_rhs_6327 j_6322 3 iter}
--     }
-- }
-- (segmap) wew_r_r_6506 : {
--     (arr) xsss_5720 : {
--         (idx) +_lhs_6512 :
--             0 : dependencies = {gtid_6507 1 tid}
--             1 : dependencies = {}
--             2 : dependencies = {gtid_6508 2 tid}
--             3 : dependencies = {}
--     }
--     (arr) (res_expanded_6494, [defunc_0_map_res_6243 : cond]) : {
--         (idx) +_rhs_6513 :
--             0 : dependencies = {gtid_6507 1 tid}
--             1 : dependencies = {gtid_6508 2 tid}
--             2 : dependencies = {}
--     }
-- }
-- (segmap) lifted_lambda_res_6523 : {
--     (arr) xsss_5720 : {
--         (idx) +_lhs_6536 :
--             0 : dependencies = {gtid_6524 2 tid}
--             1 : dependencies = {}
--             2 : dependencies = {gtid_6525 3 tid}
--             3 : dependencies = {+_lhs_6535 i_6493 0 iter, +_lhs_6535 j_6532 4 iter}
--     }
--     (arr) (res_expanded_6494, [defunc_0_map_res_6243 : cond]) : {
--         (idx) +_rhs_6538 :
--             0 : dependencies = {gtid_6524 2 tid}
--             1 : dependencies = {gtid_6525 3 tid}
--             2 : dependencies = {+_rhs_6537 i_6493 0 iter, +_rhs_6537 j_6532 4 iter}
--     }
-- }
--
