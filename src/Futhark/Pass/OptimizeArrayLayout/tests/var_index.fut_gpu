types {

}



entry("main",
      {n: i64,
       m: i64,
       A: [][]i64},
      {*[][]i64})
  entry_main (d₁_5445 : i64,
              d₂_5446 : i64,
              n_5447 : i64,
              m_5448 : i64,
              A_5449 : [d₁_5445][d₂_5446]i64)
  : {*[n_5447][m_5448]i64} = {
  let {bounds_invalid_upwards_5606 : bool} =
    slt64(n_5447, 0i64)
  let {valid_5607 : bool} =
    not bounds_invalid_upwards_5606
  let {range_valid_c_5608 : unit} =
    assert(valid_5607, {"Range ", 0i64 : i64, "..", 1i64 : i64, "..<", n_5447 : i64, " is invalid."}, "/prelude/array.fut:82:3-11")
  let {bounds_invalid_upwards_5611 : bool} =
    slt64(m_5448, 0i64)
  let {valid_5612 : bool} =
    not bounds_invalid_upwards_5611
  let {range_valid_c_5613 : unit} =
    assert(valid_5612, {"Range ", 0i64 : i64, "..", 1i64 : i64, "..<", m_5448 : i64, " is invalid."}, "/prelude/array.fut:82:3-11")
  let {nest_size_5678 : i64} =
    mul_nw64(n_5447, m_5448)
  let {segmap_group_size_5679 : i64} =
    get_size(segmap_group_size_5633, group_size)
  let {segmap_usable_groups_5680 : i64} =
    sdiv_up64(nest_size_5678, segmap_group_size_5679)
  let {defunc_0_map_res_5681 : [n_5447][m_5448]i64} =
    segmap(thread; ; groups=segmap_usable_groups_5680; groupsize=segmap_group_size_5679)
    (gtid_5682 < n_5447, gtid_5683 < m_5448) (~phys_tid_5684) : {i64} {
      let {index_primexp_5696 : i64} =
        sub64(gtid_5682, 1i64)
      let {tmp_5687 : i64} =
        #{range_valid_c_5613}
        add64(1i64, gtid_5683)
      let {lifted_lambda_res_5688 : i64} =
        #{range_valid_c_5608}
        A_5449[tmp_5687, index_primexp_5696]
      return {returns lifted_lambda_res_5688}
    }
  in {defunc_0_map_res_5681}
}


-- === Expected output after pass: CONFIRMED
-- types {
--
-- }
--
--
--
-- entry("main",
--       {n: i64,
--        m: i64,
--        A: [][]i64},
--       {*[][]i64})
--   entry_main (d₁_5445 : i64,
--               d₂_5446 : i64,
--               n_5447 : i64,
--               m_5448 : i64,
--               A_5449 : [d₁_5445][d₂_5446]i64)
--   : {*[n_5447][m_5448]i64} = {
--   let {bounds_invalid_upwards_5606 : bool} =
--     slt64(n_5447, 0i64)
--   let {valid_5607 : bool} =
--     not bounds_invalid_upwards_5606
--   let {range_valid_c_5608 : unit} =
--     assert(valid_5607, {"Range ", 0i64 : i64, "..", 1i64 : i64, "..<", n_5447 : i64, " is invalid."}, "unknown location")
--   let {bounds_invalid_upwards_5611 : bool} =
--     slt64(m_5448, 0i64)
--   let {valid_5612 : bool} =
--     not bounds_invalid_upwards_5611
--   let {range_valid_c_5613 : unit} =
--     assert(valid_5612, {"Range ", 0i64 : i64, "..", 1i64 : i64, "..<", m_5448 : i64, " is invalid."}, "unknown location")
--   let {nest_size_5678 : i64} =
--     mul_nw64(n_5447, m_5448)
--   let {segmap_group_size_5679 : i64} =
--     get_size(segmap_group_size_5633, group_size)
--   let {segmap_usable_groups_5680 : i64} =
--     sdiv_up64(nest_size_5678, segmap_group_size_5679)
--   let {defunc_0_map_res_5681 : [n_5447][m_5448]i64} =
--     segmap(thread; ; groups=segmap_usable_groups_5680; groupsize=segmap_group_size_5679)
--     (gtid_5682 < n_5447, gtid_5683 < m_5448) (~phys_tid_5684) : {i64} {
--       let {index_primexp_5696 : i64} =
--         sub64(gtid_5682, 1i64)
--       let {tmp_5687 : i64} =
--         #{range_valid_c_5613}
--         add64(1i64, gtid_5683)
--       let {lifted_lambda_res_5688 : i64} =
--         #{range_valid_c_5608}
--         A_5449[tmp_5687, index_primexp_5696]
--       return {returns lifted_lambda_res_5688}
--     }
--   in {defunc_0_map_res_5681}
-- }
