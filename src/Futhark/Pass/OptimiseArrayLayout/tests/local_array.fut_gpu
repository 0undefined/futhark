types {

}



entry("main",
      {xss: [][]i32},
      {*[][][]i32})
  entry_main (m_5292 : i64,
              n_5293 : i64,
              xss_5294 : [m_5292][n_5293]i32)
  : {*[m_5292][n_5293][n_5293]i32} = {
  let {nest_size_5506 : i64} =
    mul_nw64(m_5292, n_5293)
  let {segmap_group_size_5507 : i64} =
    get_size(segmap_group_size_5461, group_size)
  let {num_groups_5508 : i64} =
    calc_num_groups(nest_size_5506, segmap_num_groups_5463, segmap_group_size_5507)
  let {defunc_0_map_res_5510 : [m_5292][n_5293][n_5293]i32} =
    segmap(thread; virtualise; groups=num_groups_5508; groupsize=segmap_group_size_5507)
    (gtid_5511 < m_5292, gtid_5512 < n_5293) (~phys_tid_5513) : {[n_5293]i32} {
      let {eta_p_5515 : i32} =
        xss_5294[gtid_5511, gtid_5512]
      let {result_5526 : [n_5293]i32} =
        #[sequential]
        scratch(i32, n_5293)
      let {discard_5531 : i32,
           defunc_0_scan_res_5516 : [n_5293]i32} =
        #[sequential]
        loop {scanacc_5527 : i32,
              scanout_5528 : *[n_5293]i32} = {0i32, result_5526}
        for i_5529:i64 < n_5293 do {
          let {x_5520 : i32} =
            xss_5294[gtid_5511, i_5529]
          let {defunc_0_op_res_5519 : i32} =
            add32(x_5520, scanacc_5527)
          let {lw_dest_5530 : [n_5293]i32} =
            scanout_5528 with [i_5529] = defunc_0_op_res_5519
          in {defunc_0_op_res_5519, lw_dest_5530}
        }
      let {x_5521 : i64} =
        sext i32 eta_p_5515 to i64
      let {tmp_5522 : i32} =
        defunc_0_scan_res_5516[x_5521]
      let {tmp_5523 : i64} =
        sext i32 tmp_5522 to i64
      let {lifted_lambda_res_5524 : [n_5293]i32} =
        defunc_0_scan_res_5516 with [tmp_5523] = 4243i32
      return {returns lifted_lambda_res_5524}
    }
  in {defunc_0_map_res_5510}
}


-- === Expected output after pass: CONFIRMED
-- types {
--
-- }
--
--
--
-- entry("main",
--       {xss: [][]i32},
--       {*[][][]i32})
--   entry_main (m_5292 : i64,
--               n_5293 : i64,
--               xss_5294 : [m_5292][n_5293]i32)
--   : {*[m_5292][n_5293][n_5293]i32} = {
--   let {nest_size_5506 : i64} =
--     mul_nw64(m_5292, n_5293)
--   let {segmap_group_size_5507 : i64} =
--     get_size(segmap_group_size_5461, group_size)
--   let {num_groups_5508 : i64} =
--     calc_num_groups(nest_size_5506, segmap_num_groups_5463, segmap_group_size_5507)
--   let {xss_coalesced_0 : [m_5292][n_5293]i32} =
--     manifest((1, 0), xss_5294)
--   let {defunc_0_map_res_5510 : [m_5292][n_5293][n_5293]i32} =
--     segmap(thread; virtualise; groups=num_groups_5508; groupsize=segmap_group_size_5507)
--     (gtid_5511 < m_5292, gtid_5512 < n_5293) (~phys_tid_5513) : {[n_5293]i32} {
--       let {eta_p_5515 : i32} =
--         xss_5294[gtid_5511, gtid_5512]
--       let {result_5526 : [n_5293]i32} =
--         #[sequential]
--         scratch(i32, n_5293)
--       let {discard_5531 : i32,
--            defunc_0_scan_res_5516 : [n_5293]i32} =
--         #[sequential]
--         loop {scanacc_5527 : i32,
--               scanout_5528 : *[n_5293]i32} = {0i32, result_5526}
--         for i_5529:i64 < n_5293 do {
--           let {x_5520 : i32} =
--             xss_coalesced_0[gtid_5511, i_5529]
--           let {defunc_0_op_res_5519 : i32} =
--             add32(x_5520, scanacc_5527)
--           let {lw_dest_5530 : [n_5293]i32} =
--             scanout_5528 with [i_5529] = defunc_0_op_res_5519
--           in {defunc_0_op_res_5519, lw_dest_5530}
--         }
--       let {x_5521 : i64} =
--         sext i32 eta_p_5515 to i64
--       let {tmp_5522 : i32} =
--         defunc_0_scan_res_5516[x_5521]
--       let {tmp_5523 : i64} =
--         sext i32 tmp_5522 to i64
--       let {lifted_lambda_res_5524 : [n_5293]i32} =
--         defunc_0_scan_res_5516 with [tmp_5523] = 4243i32
--       return {returns lifted_lambda_res_5524}
--     }
--   in {defunc_0_map_res_5510}
-- }
