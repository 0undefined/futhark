.. _binary-data-format:

Binary Data Format
==================

Futhark supports a binary format for input files, which this page
details. Currently reading binary input is only supported for the C programs
generated by ``futhark-c`` and ``futhark-opencl``.

Currently there is no way to convert input from text format to the binary
format, but you can generate random data in the binary format with
:ref:`futhark-dataset(1)`.

Currently there is no way to output data in the binary format from Futhark
programs.

Specification
-------------

Elements that are bigger than one byte are always stored using little endian --
we mostly run our code on x86 hardware so this seemed like a reasonable choice.

When reading input for an argument to the entry function, we need to be able to
differentiate between text and binary input. If the first non-whitespace
character of the input is a ``b`` we will parse this argument as binary,
otherwise we will parse it in text format. Allowing preceding whitespace
characters makes it easy to use binary input for some arguments, and text input
for others.

The general format has this header::

  b <version> <num_dims> <type>

Where ``version`` is the version of the binary format used for encoding
(currently 1), ``num_dims`` is the number of dimensions in the array (0 for
scalar), and ``type`` is a 4 characters describing the type of the values(s) --
see below for more details.

Encoding a scalar value is done by appending the binary little endian
representation of it::

  b <version> 0 <type> <value>

To encode an array we must encode the number of dimensions ``n`` as a single
byte, each dimension ``dim_i`` as an ``int64``, and finally all the values in
their binary little endian representation::

  b <version> <n> <type> <dim_1> <dim_2> ... <dim_n> <values>


Type Values
~~~~~~~~~~~

The description of a type is a 4 character string. As of today (Feb 2017), the
values used are::

  "  i8"
  " i16"
  " i32"
  " i64"
  " f32"
  " f64"
  "bool"
